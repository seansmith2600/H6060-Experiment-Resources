#!/usr/bin/env python3

import re
import os
import csv
import sys
import json
import logging
import argparse
import requests
import itertools
from requests.auth import HTTPBasicAuth
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry


default_not_found_value = "N/A"

# OpenCVE API is rate limited, caching CWE details to reduce API calls
cwe_name_cache = {}
cwe_description_cache = {}


class LogFilter:  # pragma: no cover
    def __init__(self, level):
        self.__level = level

    def filter(self, log_record):
        return log_record.levelno <= self.__level


def get_args(args: argparse.Namespace) -> argparse.Namespace:
    """Parse and return the arguments of the application

    :parameter
        args:argparse.Namespace -- Submitted arguments to parse

    :return
        argparse.Namespace -- Parsed arguments
    """
    parser = argparse.ArgumentParser(description="Generate Vulnerability Results Report.")
    parser.add_argument(
        "--nvd-api-key",
        action="store",
        required=True,
        help="NIST NVD API key",
    )
    parser.add_argument(
        "--opencve-username",
        action="store",
        required=True,
        help="OpenCVE registered username",
    )
    parser.add_argument(
        "--opencve-password",
        action="store",
        required=True,
        help="OpenCVE registered password",
    )
    parser.add_argument(
        "--sast-horusec-report-filename",
        nargs="?",
        const="",
        required=False,
        help="Name of Horusec JSON report",
    )
    parser.add_argument(
        "--sast-semgrep-report-filename",
        nargs="?",
        const="",
        required=False,
        help="Name of Semgrep JSON report",
    )
    parser.add_argument(
        "--sast-snyk-code-report-filename",
        nargs="?",
        const="",
        required=False,
        help="Name of Snyk Code JSON report",
    )
    parser.add_argument(
        "--sca-grype-report-filename",
        nargs="?",
        const="",
        required=False,
        help="Name of Grype report",
    )
    parser.add_argument(
        "--sca-owasp-dependency-check-report-filename",
        nargs="?",
        const="",
        required=False,
        help="Name of OWASP Dependency Check JSON report",
    )
    parser.add_argument(
        "--sca-snyk-report-filename",
        nargs="?",
        const="",
        required=False,
        help="Name of Snyk report",
    )
    return parser.parse_args(args)


def get_mitre_top_25_cwe() -> list:
    """Top 25 CWE of 2024

    :return
        list -- Top 25 CWE IDs
    """
    return [
        "CWE-787",
        "CWE-79",
        "CWE-89",
        "CWE-416",
        "CWE-78",
        "CWE-20",
        "CWE-125",
        "CWE-22",
        "CWE-352",
        "CWE-434",
        "CWE-862",
        "CWE-476",
        "CWE-287",
        "CWE-190",
        "CWE-502",
        "CWE-77",
        "CWE-119",
        "CWE-798",
        "CWE-918",
        "CWE-306",
        "CWE-362",
        "CWE-269",
        "CWE-94",
        "CWE-863",
        "CWE-276",
    ]


def get_owasp_top_10_cwe() -> set:
    """Top 10 OWASP CWE of 2024

    :return
        list -- CWE IDs corresponding to the OWASP security category
    """
    return {
        "A01 Broken Access Control": [
            "CWE-22",
            "CWE-23",
            "CWE-35",
            "CWE-59",
            "CWE-200",
            "CWE-201",
            "CWE-219",
            "CWE-264",
            "CWE-275",
            "CWE-276",
            "CWE-284",
            "CWE-285",
            "CWE-352",
            "CWE-359",
            "CWE-377",
            "CWE-402",
            "CWE-425",
            "CWE-441",
            "CWE-497",
            "CWE-538",
            "CWE-540",
            "CWE-548",
            "CWE-552",
            "CWE-566",
            "CWE-601",
            "CWE-639",
            "CWE-651",
            "CWE-668",
            "CWE-706",
            "CWE-862",
            "CWE-863",
            "CWE-913",
            "CWE-922",
            "CWE-1275",
        ],
        "A02 Cryptographic Failures": [
            "CWE-261",
            "CWE-296",
            "CWE-310",
            "CWE-319",
            "CWE-321",
            "CWE-322",
            "CWE-323",
            "CWE-324",
            "CWE-325",
            "CWE-326",
            "CWE-327",
            "CWE-328",
            "CWE-329",
            "CWE-330",
            "CWE-331",
            "CWE-335",
            "CWE-336",
            "CWE-337",
            "CWE-338",
            "CWE-339",
            "CWE-340",
            "CWE-347",
            "CWE-523",
            "CWE-720",
            "CWE-757",
            "CWE-759",
            "CWE-760",
            "CWE-780",
            "CWE-818",
            "CWE-916",
        ],
        "A03 Injection": [
            "CWE-20",
            "CWE-74",
            "CWE-75",
            "CWE-77",
            "CWE-78",
            "CWE-79",
            "CWE-80",
            "CWE-83",
            "CWE-87",
            "CWE-88",
            "CWE-89",
            "CWE-90",
            "CWE-91",
            "CWE-93",
            "CWE-94",
            "CWE-95",
            "CWE-96",
            "CWE-97",
            "CWE-98",
            "CWE-99",
            "CWE-100",
            "CWE-113",
            "CWE-116",
            "CWE-138",
            "CWE-184",
            "CWE-470",
            "CWE-471",
            "CWE-564",
            "CWE-610",
            "CWE-643",
            "CWE-644",
            "CWE-652",
            "CWE-917",
        ],
        "A04 Insecure Design": [
            "CWE-73",
            "CWE-183",
            "CWE-209",
            "CWE-213",
            "CWE-235",
            "CWE-256",
            "CWE-257",
            "CWE-266",
            "CWE-269",
            "CWE-280",
            "CWE-311",
            "CWE-312",
            "CWE-313",
            "CWE-316",
            "CWE-419",
            "CWE-430",
            "CWE-434",
            "CWE-444",
            "CWE-451",
            "CWE-472",
            "CWE-501",
            "CWE-522",
            "CWE-525",
            "CWE-539",
            "CWE-579",
            "CWE-598",
            "CWE-602",
            "CWE-642",
            "CWE-646",
            "CWE-650",
            "CWE-653",
            "CWE-656",
            "CWE-657",
            "CWE-799",
            "CWE-807",
            "CWE-840",
            "CWE-841",
            "CWE-927",
            "CWE-1021",
            "CWE-1173",
        ],
        "A05 Security Misconfiguration": [
            "CWE-2",
            "CWE-11",
            "CWE-13",
            "CWE-15",
            "CWE-16",
            "CWE-260",
            "CWE-315",
            "CWE-266",
            "CWE-520",
            "CWE-526",
            "CWE-537",
            "CWE-541",
            "CWE-547",
            "CWE-611",
            "CWE-614",
            "CWE-756",
            "CWE-776",
            "CWE-942",
            "CWE-1004",
            "CWE-1032",
            "CWE-1174",
        ],
        "A06 Vulnerable And Outdated Components": [
            "Drupal",
            "WordPress",
            "Joomla",
        ],
        "A07 Identification and Authentication Failures": [
            "CWE-255",
            "CWE-259",
            "CWE-287",
            "CWE-288",
            "CWE-290",
            "CWE-294",
            "CWE-295",
            "CWE-297",
            "CWE-300",
            "CWE-302",
            "CWE-304",
            "CWE-306",
            "CWE-307",
            "CWE-346",
            "CWE-384",
            "CWE-521",
            "CWE-613",
            "CWE-620",
            "CWE-640",
            "CWE-798",
            "CWE-940",
            "CWE-1216",
        ],
        "A08 Software and Data Integrity Failures": [
            "CWE-345",
            "CWE-353",
            "CWE-426",
            "CWE-494",
            "CWE-502",
            "CWE-565",
            "CWE-784",
            "CWE-829",
            "CWE-830",
            "CWE-913",
        ],
        "A09 Security Logging and Monitoring Failures": [
            "CWE-117",
            "CWE-223",
            "CWE-532",
            "CWE-778",
        ],
        "A10 Server Side Request Forgery (SSRF)": ["CWE-918"],
    }


def send_get_request(url: str, username: str, password: str) -> requests:  # pragma: no cover
    """Send GET request to URL

    :parameter
        url:str -- URL to make GET request
        username:str -- Username for authentication
        password:str -- Password for authentication

    :return
        requests.models.Response -- Response from GET request
    """
    session = requests.Session()
    retries = Retry(
        total=3,
        backoff_factor=3,
        status_forcelist=[404, 408, 500, 502, 503, 504],
    )
    session.mount("https://", HTTPAdapter(max_retries=retries))
    request = session.get(url, headers={"Accept": "application/json"}, auth=HTTPBasicAuth(username, password))

    if request.ok:
        log.info(f"GET request successful: {url}")
        return request
    log.error(f"GET request failed: \n{request.text.encode('utf8')}")
    return None


def get_directory_path() -> str:
    """Get directory path of script

    :return
        str -- Directory path of script
    """
    return os.path.dirname(os.path.realpath(__file__))


def convert_list_to_csv_row(data: list) -> str:
    """Convert list to CSV row

    :parameter
        data:list -- Data to convert to CSV row

    :return
        str -- CSV row
    """
    return ",".join(map(str, data))


def get_json_value(json_data: dict, data_key_1: str, default_value: str = default_not_found_value) -> str:
    """Get JSON value if exists

    :parameter
        json_data:dict -- JSON response data
        data_key_1:str -- Primary key of JSON response data
        data_key_2:str -- Optional second key of JSON response data

    :return
        str -- JSON value
    """
    if data_key_1 in json_data:
        # Check if value is not empty
        if json_data[data_key_1]:
            return json_data[data_key_1]
    return default_value


def get_csv_sast_column_headers() -> str:
    """Get column headers for SAST CSV report

    :return
        list -- Column headers for SAST CSV report
    """
    csv_headers = [
        "Tool Type",
        "Tool Name",
        "Tool Version",
        "Tool Classification",
        "Language",
        "Severity",
        "Confidence",
        "CWE ID",
        "CWE Name",
        "CWE Description",
        "CWE Impact",
        "CWE Likelihood",
        "OWASP Top 10",
        "Mitre Top 25",
        "Rule ID",
        "File",
        "Line",
    ]
    return f"{convert_list_to_csv_row(csv_headers)}\n"


def write_csv_report_header(tool_type: str, csv_output_filename: str) -> None:
    """Write CSV report header

    :parameter
        tool_type:str -- Type of tool to write header for (sca or sast)
        csv_output_filename:str -- Name of CSV report to write
    """
    log.info(f"Writing CSV report header to {get_directory_path()}/{csv_output_filename}")

    with open(f"{get_directory_path()}/{csv_output_filename}", "w") as file:
        if tool_type == "sast":
            file.write(get_csv_sast_column_headers())
        else:
            log.error(f"Tool type {tool_type} not supported")
            sys.exit(1)

    log.info(f"Successfully wrote CSV report header to {get_directory_path()}/{csv_output_filename}")


def write_to_csv_report(csv_data: list, csv_output_filename: str) -> None:
    """Write parsed vulnerability data to CSV report

    :parameter
        csv_data:list -- Data to write to CSV report
        csv_output_filename:str -- Name of CSV report to write
    """
    log.info(f"Writing parsed vulnerability data to {get_directory_path()}/{csv_output_filename}")

    csv_data.sort()
    csv_data = list(item for item, _ in itertools.groupby(csv_data))

    with open(f"{get_directory_path()}/{csv_output_filename}", "a") as csv_file:
        writer = csv.writer(csv_file)
        writer.writerows(csv_data)

    log.info(f"Successfully wrote SBOM and OSV data to {get_directory_path()}/{csv_output_filename}")


def get_cwe_regex() -> str:
    """Get regex pattern for CWE ID

    :return
        str -- CWE ID regex pattern
    """
    return r"CWE-(\d{1,9})"


def search_owasp_top_10(cwe_id: str) -> str:
    """Search OWASP Top 10 for CWE ID

    :parameter
        cwe_id:str -- CWE ID to check if in OWASP top 10

    :return
        str -- OWASP category associated with CWE ID
    """
    for key, value in get_owasp_top_10_cwe().items():
        if cwe_id in value:
            log.info(f"{cwe_id} found in OWASP Top 10: {key}")
            return key
    log.info(f"{cwe_id} not found in OWASP Top 10")
    return default_not_found_value


def search_mitre_top_25(cwe_id: str) -> str:
    """Search MITRE Top 25 for CWE ID

    :parameter
        cwe_id:str -- CWE ID to check if in MITRE top 25

    :return
        str -- MITRE ranking for CWE ID
    """
    if cwe_id in get_mitre_top_25_cwe():
        cwe_index = str(get_mitre_top_25_cwe().index(cwe_id) + 1)
        log.info(f"{cwe_id} found in MITRE Top 25 at index {cwe_index}")
        return cwe_index
    log.info(f"{cwe_id} not found in MITRE Top 25")
    return default_not_found_value


def get_opencve_api_url(cwe_id: str) -> str:
    """Get OpenCVE API URL for CWE ID

    :parameter
        cwe_id:str -- CWE ID to search in OpenCVE

    :return
        str -- OpenCVE API URL for CWE ID
    """
    return f"https://www.opencve.io/api/cwe/{cwe_id}"


def parse_horusec_data(
    opencve_username: str,
    opencve_password: str,
    sast_horusec_report_filename: str,
    csv_filename: str,
) -> list:
    """Parse Horusec SAST JSON report and write data to output file

    :parameter
        opencve_username:str -- OpenCVE username
        opencve_password:str -- OpenCVE password
        sast_horusec_report_filename:str -- Name of Horusec JSON report to parse
        csv_filename:str -- Name of CSV report to write data to
    """
    log.info(f"Parsing Horusec report: {sast_horusec_report_filename}")
    with open(sast_horusec_report_filename, "r") as f:
        data = json.load(f)
    csv_rows = []
    try:
        # Check if vulnerabilities exist in report
        if data["analysisVulnerabilities"] is None or len(data["analysisVulnerabilities"]) == 0:
            log.info(f"No vulnerabilities found in Horusec report: {sast_horusec_report_filename}")
        else:
            # Iterate through all vulnerabilities
            for analysis in data["analysisVulnerabilities"]:
                vulnerability = analysis["vulnerabilities"]
                vulnerability_details = get_json_value(vulnerability, "details")

                # Only consider vulnerabilities with CWE ID
                match = re.search(get_cwe_regex(), vulnerability_details)
                if match:
                    vulnerability_cwe_id = match.group(0)
                    log.info(f"Getting vulnerability details: {vulnerability_cwe_id}")

                    tool_type = "SAST"
                    tool_name = get_json_value(vulnerability, "securityTool")
                    tool_version = get_json_value(data, "version")
                    tool_classification = "Syntactic"

                    vulnerability_language = get_json_value(vulnerability, "language")
                    vulnerability_severity = get_json_value(vulnerability, "severity")
                    vulnerability_confidence = get_json_value(vulnerability, "confidence")
                    vulnerability_rule_id = get_json_value(vulnerability, "rule_id")
                    vulnerability_file = get_json_value(vulnerability, "file")
                    vulnerability_line = get_json_value(vulnerability, "line")

                    vulnerability_owasp_top_10 = search_owasp_top_10(vulnerability_cwe_id)
                    vulnerability_mitre_top_25 = search_mitre_top_25(vulnerability_cwe_id)

                    # Set globals
                    global cwe_name_cache, cwe_description_cache

                    # Set default values
                    vulnerability_cwe_name = default_not_found_value
                    vulnerability_cwe_description = default_not_found_value

                    if vulnerability_cwe_id in cwe_name_cache:
                        # Get CWE details from cache
                        vulnerability_cwe_name = cwe_name_cache[vulnerability_cwe_id]
                        vulnerability_cwe_description = cwe_description_cache[vulnerability_cwe_id]
                    else:
                        # Get CWE details from OpenCVE
                        opencve_cwe_details = send_get_request(
                            get_opencve_api_url(vulnerability_cwe_id), opencve_username, opencve_password
                        )
                        if opencve_cwe_details:
                            opencve_details = opencve_cwe_details.json()
                            vulnerability_cwe_name = get_json_value(opencve_details, "name")
                            vulnerability_cwe_description = get_json_value(opencve_details, "description")
                            # Cache details
                            cwe_name_cache = {vulnerability_cwe_id: vulnerability_cwe_name}
                            cwe_description_cache = {vulnerability_cwe_id: vulnerability_cwe_description}

                    vulnerability_results_data = [
                        tool_type,
                        tool_name,
                        tool_version,
                        tool_classification,
                        vulnerability_language,
                        vulnerability_severity,
                        vulnerability_confidence,
                        vulnerability_cwe_id,
                        vulnerability_cwe_name,
                        vulnerability_cwe_description,
                        default_not_found_value,
                        default_not_found_value,
                        vulnerability_owasp_top_10,
                        vulnerability_mitre_top_25,
                        vulnerability_rule_id,
                        vulnerability_file,
                        vulnerability_line,
                    ]
                    log.info(f"Fetched vulnerability details: {vulnerability_cwe_id}")

                    # Add vulnerability data to CSV row
                    csv_rows.append(vulnerability_results_data)

            log.info(f"{str(len(csv_rows))} CSV rows generated")
            write_to_csv_report(csv_rows, csv_filename)
    except Exception as e:  # pragma: no cover
        log.error(f"Failed to parse Horusec report: {e}")
        sys.exit(1)
    else:
        log.info(f"Successfully parsed Horusec report: {sast_horusec_report_filename}")
    return None


def main(args: argparse.Namespace) -> None:
    """Main function of script

    :parameter
        args:argparse.Namespace -- Parsed arguments supplied to script
    """
    # SAST - Horusec
    if args.sast_horusec_report_filename:
        if os.path.isfile(args.sast_horusec_report_filename):
            log.info(f"Horusec report found: {args.sast_horusec_report_filename}")
            csv_output_filename = "sast_horusec_results.csv"
            write_csv_report_header("sast", csv_output_filename)

            parse_horusec_data(
                args.opencve_username, args.opencve_password, args.sast_horusec_report_filename, csv_output_filename
            )
        else:
            log.error(f"Horusec file not found: {args.sast_horusec_report_filename}")
            sys.exit(1)


if __name__ == "__main__":
    """
    The starting point of the application
    Script should be running in the root dir of project
    """
    log = logging.getLogger()
    log.setLevel(logging.NOTSET)

    logging_handler_out = logging.StreamHandler(sys.stdout)
    logging_handler_out.setLevel(logging.INFO)
    logging_handler_out.addFilter(LogFilter(logging.INFO))
    log.addHandler(logging_handler_out)

    logging_handler_err = logging.StreamHandler(sys.stderr)
    logging_handler_err.setLevel(logging.ERROR)
    logging_handler_err.addFilter(LogFilter(logging.ERROR))
    log.addHandler(logging_handler_err)

    main(get_args(sys.argv[1:]))
