#!/usr/bin/env python3

import os
import sys
import logging
import unittest
import json as JSON
from argparse import Namespace
from unittest.mock import patch
from main.python3 import automated_vulnerability_results_report


TEST_DIRECTORY_RESOURCES = os.path.dirname(os.path.realpath(__file__)) + "/resources/"

# Report filenames with no vulnerabilities
SAST_CODEQL_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sast-codeql/other/codeql-report-no-vulnerabilities.json"
SAST_DEEPSOURCE_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sast-deepsource/other/deepsource-report-no-vulnerabilities.json"
SAST_HORUSEC_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sast-horusec/other/horusec-report-no-vulnerabilities.json"
SAST_SEMGREP_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sast-semgrep/other/semgrep-report-no-vulnerabilities.json"
SAST_SNYK_CODE_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/other/snyk-code-report-no-vulnerabilities.json"
SAST_SONARQUBE_HOTSPOTS_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots/other/sonarqube-report-no-vulnerabilities.json"
)
SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots-show/other/sonarqube-report-no-vulnerabilities.json"
)
SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_NO_FIX_RECOMMENDATIONS = (
    TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots-show/other/sonarqube-report-no-fix-recommendations.json"
)

SCA_DEPENDABOT_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sca-dependabot/other/dependabot-report-no-vulnerabilities.json"
SCA_ECLIPSE_STEADY_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sca-eclipse-steady/other/eclipse-steady-report-no-vulnerabilities.json"
)
SCA_GRYPE_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sca-grype/other/grype-report-no-vulnerabilities.json"
SCA_SNYK_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sca-snyk/other/snyk-report-no-vulnerabilities.json"
SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/other/owasp-dependency-check-report-no-vulnerabilities.json"
)
SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_DEPENDENCIES = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/other/owasp-dependency-check-report-no-dependencies.json"
)

# Report filenames
SAST_CODEQL_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-codeql/java/codeql-report.json"
SAST_CODEQL_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-codeql/javascript/codeql-report.json"
SAST_CODEQL_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-codeql/python/codeql-report.json"

SAST_DEEPSOURCE_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-deepsource/java/deepsource-report.json"
SAST_DEEPSOURCE_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-deepsource/javascript/deepsource-report.json"
SAST_DEEPSOURCE_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-deepsource/python/deepsource-report.json"

SAST_HORUSEC_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-horusec/java/horusec-report.json"
SAST_HORUSEC_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-horusec/javascript/horusec-report.json"
SAST_HORUSEC_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-horusec/python/horusec-report.json"

SAST_SEMGREP_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-semgrep/java/semgrep-report.json"
SAST_SEMGREP_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-semgrep/javascript/semgrep-report.json"
SAST_SEMGREP_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-semgrep/python/semgrep-report.json"

SAST_SNYK_CODE_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/java/snyk-code-report.json"
SAST_SNYK_CODE_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/javascript/snyk-code-report.json"
SAST_SNYK_CODE_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/python/snyk-code-report.json"

SAST_SONARQUBE_HOTSPOTS_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots/java/sonarqube-report.json"
SAST_SONARQUBE_HOTSPOTS_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots/javascript/sonarqube-report.json"
SAST_SONARQUBE_HOTSPOTS_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots/python/sonarqube-report.json"
SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots-show/java/sonarqube-report.json"
SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots-show/javascript/sonarqube-report.json"
SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-sonarqube/hotspots-show/python/sonarqube-report.json"

SCA_DEPENDABOT_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sca-dependabot/java/dependabot-report.json"
SCA_DEPENDABOT_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sca-dependabot/javascript/dependabot-report.json"
SCA_DEPENDABOT_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sca-dependabot/python/dependabot-report.json"

SCA_ECLIPSE_STEADY_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sca-eclipse-steady/java/eclipse-steady-report.json"
SCA_ECLIPSE_STEADY_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sca-eclipse-steady/python/eclipse-steady-report.json"

SCA_GRYPE_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sca-grype/java/grype-report.json"
SCA_GRYPE_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sca-grype/javascript/grype-report.json"
SCA_GRYPE_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sca-grype/python/grype-report.json"

SCA_SNYK_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sca-snyk/java/snyk-report.json"
SCA_SNYK_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sca-snyk/javascript/snyk-report.json"
SCA_SNYK_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sca-snyk/python/snyk-report.json"

SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/java/owasp-dependency-check-report.json"
SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVASCRIPT = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/javascript/owasp-dependency-check-report.json"
)
SCA_OWASP_DEPENDENCY_CHECK_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/python/owasp-dependency-check-report.json"

# CSV result filenames
CSV_CODEQL_JAVA_RESULT_FILENAME = "sast_codeql_results_java.csv"
CSV_CODEQL_JAVASCRIPT_RESULT_FILENAME = "sast_codeql_results_javascript.csv"
CSV_CODEQL_PYTHON_RESULT_FILENAME = "sast_codeql_results_python.csv"

CSV_DEEPSOURCE_JAVA_RESULT_FILENAME = "sast_deepsource_results_java.csv"
CSV_DEEPSOURCE_JAVASCRIPT_RESULT_FILENAME = "sast_deepsource_results_javascript.csv"
CSV_DEEPSOURCE_PYTHON_RESULT_FILENAME = "sast_deepsource_results_python.csv"

CSV_HORUSEC_JAVA_RESULT_FILENAME = "sast_horusec_results_java.csv"
CSV_HORUSEC_JAVASCRIPT_RESULT_FILENAME = "sast_horusec_results_javascript.csv"
CSV_HORUSEC_PYTHON_RESULT_FILENAME = "sast_horusec_results_python.csv"

CSV_SEMGREP_JAVA_RESULT_FILENAME = "sast_semgrep_results_java.csv"
CSV_SEMGREP_JAVASCRIPT_RESULT_FILENAME = "sast_semgrep_results_javascript.csv"
CSV_SEMGREP_PYTHON_RESULT_FILENAME = "sast_semgrep_results_python.csv"

CSV_SNYK_CODE_JAVA_RESULT_FILENAME = "sast_snyk_code_results_java.csv"
CSV_SNYK_CODE_JAVASCRIPT_RESULT_FILENAME = "sast_snyk_code_results_javascript.csv"
CSV_SNYK_CODE_PYTHON_RESULT_FILENAME = "sast_snyk_code_results_python.csv"

CSV_SONARQUBE_JAVA_RESULT_FILENAME = "sast_sonarqube_results_java.csv"
CSV_SONARQUBE_JAVASCRIPT_RESULT_FILENAME = "sast_sonarqube_results_javascript.csv"
CSV_SONARQUBE_PYTHON_RESULT_FILENAME = "sast_sonarqube_results_python.csv"

CSV_DEPENDABOT_JAVA_RESULT_FILENAME = "sca_dependabot_results_java.csv"
CSV_DEPENDABOT_JAVASCRIPT_RESULT_FILENAME = "sca_dependabot_results_javascript.csv"
CSV_DEPENDABOT_PYTHON_RESULT_FILENAME = "sca_dependabot_results_python.csv"

CSV_ECLIPSE_STEADY_JAVA_RESULT_FILENAME = "sca_eclipse_steady_results_java.csv"
CSV_ECLIPSE_STEADY_PYTHON_RESULT_FILENAME = "sca_eclipse_steady_results_python.csv"

CSV_GRYPE_JAVA_RESULT_FILENAME = "sca_grype_results_java.csv"
CSV_GRYPE_JAVASCRIPT_RESULT_FILENAME = "sca_grype_results_javascript.csv"
CSV_GRYPE_PYTHON_RESULT_FILENAME = "sca_grype_results_python.csv"

CSV_SNYK_JAVA_RESULT_FILENAME = "sca_snyk_results_java.csv"
CSV_SNYK_JAVASCRIPT_RESULT_FILENAME = "sca_snyk_results_javascript.csv"
CSV_SNYK_PYTHON_RESULT_FILENAME = "sca_snyk_results_python.csv"

CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME = "sca_owasp_dependency_check_results_java.csv"
CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_FILENAME = "sca_owasp_dependency_check_results_javascript.csv"
CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_FILENAME = "sca_owasp_dependency_check_results_python.csv"

# CSV result paths
SOURCE_DIRECTORY = "../../main/python3"
CSV_HORUSEC_JAVA_RESULT_PATH = f"{SOURCE_DIRECTORY}/{CSV_HORUSEC_JAVA_RESULT_FILENAME}"

# OpenCVE responses
OPENCSV_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "opencve/other/opencve-empty-response.json"
OPENCSV_RESPONSE_JAVA = TEST_DIRECTORY_RESOURCES + "opencve/java/opencve-response.json"
OPENCSV_RESPONSE_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "opencve/javascript/opencve-response.json"
OPENCSV_RESPONSE_PYTHON = TEST_DIRECTORY_RESOURCES + "opencve/python/opencve-response.json"

# NVD responses
NVD_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-empty-response.json"
NVD_RESPONSE_NO_CVE = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-no-cwe-response.json"
NVD_RESPONSE_NO_WEAKNESS = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-no-weakness-response.json"
NVD_RESPONSE_MULTIPLE_CVE = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-multiple-cwe-response.json"
NVD_RESPONSE_JAVA = TEST_DIRECTORY_RESOURCES + "nvd/java/nvd-response.json"
NVD_RESPONSE_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "nvd/javascript/nvd-response.json"
NVD_RESPONSE_PYTHON = TEST_DIRECTORY_RESOURCES + "nvd/python/nvd-response.json"

# Mocked required arguments
NVD_API_KEY = "11111111-2222-3333-4444-555555555555"
OPENCVE_USERNAME = "username"
OPENCVE_PASSWORD = "password"
GITHUB_TOKEN = "ghp_1234567890"

# Mocked optional GitHub arguments
GITHUB_ORGANISATION = "organisation"
GITHUB_REPOSITORY_JAVA = "repository-java"
GITHUB_REPOSITORY_JAVASCRIPT = "repository-javascript"
GITHUB_REPOSITORY_PYTHON = "repository-python"
GITHUB_REPOSITORY_OTHER = "repository-other"

# Mocked optional SonarQube arguments
SONARQUBE_URL = "http://localhost:9000"
SONARQUBE_TOKEN = "token"
SONARQUBE_PROJECT_KEY_JAVA = "project-key-java"
SONARQUBE_PROJECT_KEY_JAVASCRIPT = "project-key-javascript"
SONARQUBE_PROJECT_KEY_PYTHON = "project-key-python"
SONARQUBE_PROJECT_KEY_OTHER = "project-key-other"
SONARQUBE_HOTSPOTS_KEY_JAVA = "AZCIH7QXOOw8MVhrDFOV"
SONARQUBE_HOTSPOTS_KEY_JAVASCRIPT = "AZCNuWaOejjv-cvUWJyJ"
SONARQUBE_HOTSPOTS_KEY_PYTHON = "AZAwa7wZ5GVDwooZre4W"
SONARQUBE_HOTSPOTS_KEY_NO_FIX_RECOMMENDATION = "AZCIH6s_OOw8MVhrDE14"

# Mocked optional DeepSource arguments
DEEPSOURCE_API_KEY = "dsp_123"

# CWE IDs for mock responses
CWE_JAVA = "CWE-327"
CWE_JAVASCRIPT = "CWE-223"
CWE_PYTHON = "CWE-798"

# CVE IDs for mock responses
CVE_JAVA = "CVE-2022-42004"
CVE_JAVASCRIPT = "CVE-2020-15366"
CVE_PYTHON = "CVE-2022-24303"
CVE_NOT_FOUND = "CVE-2020-8203"
CVE_NO_CWE = "CVE-2018-18442"
CVE_NO_WEAKNESS = "CVE-2024-28219"
CVE_MULTIPLE_CWE = "CVE-2021-44228"


def mocked_vulnerability_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if CWE_JAVA in args[0]:
        return MockResponse(OPENCSV_RESPONSE_JAVA, 200)
    elif CWE_JAVASCRIPT in args[0]:
        return MockResponse(OPENCSV_RESPONSE_JAVASCRIPT, 200)
    elif CWE_PYTHON in args[0]:
        return MockResponse(OPENCSV_RESPONSE_PYTHON, 200)
    elif CVE_JAVA in args[0]:
        return MockResponse(NVD_RESPONSE_JAVA, 200)
    elif CVE_JAVASCRIPT in args[0]:
        return MockResponse(NVD_RESPONSE_JAVASCRIPT, 200)
    elif CVE_PYTHON in args[0]:
        return MockResponse(NVD_RESPONSE_PYTHON, 200)
    elif CVE_NOT_FOUND in args[0]:
        return MockResponse(NVD_RESPONSE_EMPTY, 200)
    elif CVE_NO_CWE in args[0]:
        return MockResponse(NVD_RESPONSE_NO_CVE, 200)
    elif CVE_NO_WEAKNESS in args[0]:
        return MockResponse(NVD_RESPONSE_NO_WEAKNESS, 200)
    elif CVE_MULTIPLE_CWE in args[0]:
        return MockResponse(NVD_RESPONSE_MULTIPLE_CVE, 200)
    else:
        return None


def mocked_github_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if GITHUB_REPOSITORY_JAVASCRIPT in args[0] and "code-scanning" in args[0]:
        return MockResponse(SAST_CODEQL_REPORT_JAVASCRIPT, 200)
    elif GITHUB_REPOSITORY_JAVA in args[0] and "code-scanning" in args[0]:
        return MockResponse(SAST_CODEQL_REPORT_JAVA, 200)
    elif GITHUB_REPOSITORY_PYTHON in args[0] and "code-scanning" in args[0]:
        return MockResponse(SAST_CODEQL_REPORT_PYTHON, 200)
    elif GITHUB_REPOSITORY_OTHER in args[0] and "code-scanning" in args[0]:
        return MockResponse(SAST_CODEQL_REPORT_NO_VULNERABILITIES, 200)
    elif GITHUB_REPOSITORY_JAVASCRIPT in args[0] and "dependabot" in args[0]:
        return MockResponse(SCA_DEPENDABOT_REPORT_JAVASCRIPT, 200)
    elif GITHUB_REPOSITORY_JAVA in args[0] and "dependabot" in args[0]:
        return MockResponse(SCA_DEPENDABOT_REPORT_JAVA, 200)
    elif GITHUB_REPOSITORY_PYTHON in args[0] and "dependabot" in args[0]:
        return MockResponse(SCA_DEPENDABOT_REPORT_PYTHON, 200)
    elif GITHUB_REPOSITORY_OTHER in args[0] and "dependabot" in args[0]:
        return MockResponse(SCA_DEPENDABOT_REPORT_NO_VULNERABILITIES, 200)
    else:
        return None


def mocked_sonarqube_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if "no-report" in args[0] or "missing-key" in args[0]:
        return None
    elif SONARQUBE_PROJECT_KEY_JAVASCRIPT in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_REPORT_JAVASCRIPT, 200)
    elif SONARQUBE_PROJECT_KEY_JAVA in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_REPORT_JAVA, 200)
    elif SONARQUBE_PROJECT_KEY_PYTHON in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_REPORT_PYTHON, 200)
    elif SONARQUBE_PROJECT_KEY_OTHER in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_REPORT_NO_VULNERABILITIES, 200)
    elif SONARQUBE_HOTSPOTS_KEY_JAVASCRIPT in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_JAVASCRIPT, 200)
    elif SONARQUBE_HOTSPOTS_KEY_JAVA in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_JAVA, 200)
    elif SONARQUBE_HOTSPOTS_KEY_PYTHON in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_PYTHON, 200)
    elif SONARQUBE_HOTSPOTS_KEY_NO_FIX_RECOMMENDATION in args[0]:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_NO_FIX_RECOMMENDATIONS, 200)
    else:
        return MockResponse(SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_NO_VULNERABILITIES, 200)


def mocked_deepsource_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if GITHUB_REPOSITORY_JAVASCRIPT in str(args[3]):
        return MockResponse(SAST_DEEPSOURCE_REPORT_JAVASCRIPT, 200)
    elif GITHUB_REPOSITORY_JAVA in str(args[3]):
        return MockResponse(SAST_DEEPSOURCE_REPORT_JAVA, 200)
    elif GITHUB_REPOSITORY_PYTHON in str(args[3]):
        return MockResponse(SAST_DEEPSOURCE_REPORT_PYTHON, 200)
    elif GITHUB_REPOSITORY_OTHER in str(args[3]):
        return MockResponse(SAST_DEEPSOURCE_REPORT_NO_VULNERABILITIES, 200)
    else:
        return None


class DevNull:
    def __init__(self):
        pass

    def write(self, s):
        pass


@patch("sys.stdout", new=DevNull())
@patch("sys.stderr", new=DevNull())
class TestAutomatedVulnerabilityResultsReport(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAutomatedVulnerabilityResultsReport, self).__init__(*args, **kwargs)

    @classmethod
    def setUpClass(cls):
        automated_vulnerability_results_report.log = logging.getLogger()
        automated_vulnerability_results_report.log.setLevel(logging.INFO)
        with open(os.devnull, "w") as f:
            sys.stdout = f

    def __mock_args(
        self,
        nvd_api_key: str,
        opencve_username: str,
        opencve_password: str,
        github_token: str,
        github_organisation: str,
        github_repository: str,
        sonarqube_url: str,
        sonarqube_token: str,
        sonarqube_project_key: str,
        deepsource_api_key: str,
        sast_codeql_csv_result_filename: str,
        sast_deeepsource_csv_result_filename: str,
        sast_horusec_report_filename: str,
        sast_horusec_csv_result_filename: str,
        sast_semgrep_report_filename: str,
        sast_semgrep_csv_result_filename: str,
        sast_sonarqube_csv_result_filename: str,
        sast_snyk_code_report_filename: str,
        sast_snyk_code_csv_result_filename: str,
        sca_dependabot_csv_result_filename: str,
        sca_eclipse_steady_report_filename: str,
        sca_eclipse_steady_csv_result_filename: str,
        sca_grype_report_filename: str,
        sca_grype_csv_result_filename: str,
        sca_snyk_report_filename: str,
        sca_snyk_csv_result_filename: str,
        sca_owasp_dependency_check_report_filename: str,
        sca_owasp_dependency_check_csv_result_filename: str,
    ) -> Namespace:
        """Mock arguments in argparse.Namespace type

        :parameter
            nvd_api_key:str -- NVD API Key to be mocked in the arguments
            opencve_username:str -- OpenCVE username to be mocked in the arguments
            opencve_password:str -- OpenCVE password to be mocked in the arguments
            github_token:str -- GitHub token to be mocked in the arguments
            github_organisation:str -- GitHub organisation to be mocked in the arguments
            github_repository:str -- GitHub repository to be mocked in the arguments
            sonarqube_url:str -- SonarQube URL to be mocked in the arguments
            sonarqube_token:str -- SonarQube token to be mocked in the arguments
            sonarqube_project_key:str -- SonarQube project key to be mocked in the arguments
            deepsource_api_key:str -- DeepSource API Key to be mocked in the arguments
            sast_codeql_csv_result_filename:str -- Name of the SAST CodeQL CSV result
            sast_deeepsource_csv_result_filename:str -- Name of the SAST DeepSource CSV result
            sast_horusec_report_filename:str -- Name of the SAST Horusec report
            sast_horusec_csv_result_filename:str -- Name of the SAST Horusec CSV result
            sast_semgrep_report_filename:str -- Name of the SAST Semgrep report
            sast_semgrep_csv_result_filename:str -- Name of the SAST Semgrep CSV result
            sast_sonarqube_csv_result_filename:str -- Name of the SAST SonarQube CSV result
            sast_snyk_code_report_filename:str -- Name of the SAST Snyk-Code report
            sast_snyk_code_csv_result_filename:str -- Name of the SAST Snyk-Code CSV result
            sca_dependabot_csv_result_filename:str -- Name of the SCA Dependabot CSV result
            sca_eclipse_steady_report_filename:str -- Name of the SCA Eclipse Steady report
            sca_eclipse_steady_csv_result_filename:str -- Name of the SCA Eclipse Steady CSV result
            sca_grype_report_filename:str -- Name of the SCA Grype report
            sca_grype_csv_result_filename:str -- Name of the SCA Grype CSV result
            sca_snyk_report_filename:str -- Name of the SCA Snyk report
            sca_snyk_csv_result_filename:str -- Name of the SCA Snyk CSV result
            sca_owasp_dependency_check_report_filename:str -- Name of the SCA OWASP Dependency Check report
            sca_owasp_dependency_check_csv_result_filename:str -- Name of the SCA OWASP Dependency Check CSV result

        :return
            argparse.Namespace -- Mocked arguments
        """
        return Namespace(
            nvd_api_key=nvd_api_key,
            opencve_username=opencve_username,
            opencve_password=opencve_password,
            github_token=github_token,
            github_organisation=github_organisation,
            github_repository=github_repository,
            sonarqube_url=sonarqube_url,
            sonarqube_token=sonarqube_token,
            sonarqube_project_key=sonarqube_project_key,
            deepsource_api_key=deepsource_api_key,
            sast_codeql_csv_result_filename=sast_codeql_csv_result_filename,
            sast_deeepsource_csv_result_filename=sast_deeepsource_csv_result_filename,
            sast_horusec_report_filename=sast_horusec_report_filename,
            sast_horusec_csv_result_filename=sast_horusec_csv_result_filename,
            sast_semgrep_report_filename=sast_semgrep_report_filename,
            sast_semgrep_csv_result_filename=sast_semgrep_csv_result_filename,
            sast_sonarqube_csv_result_filename=sast_sonarqube_csv_result_filename,
            sast_snyk_code_report_filename=sast_snyk_code_report_filename,
            sast_snyk_code_csv_result_filename=sast_snyk_code_csv_result_filename,
            sca_dependabot_csv_result_filename=sca_dependabot_csv_result_filename,
            sca_eclipse_steady_report_filename=sca_eclipse_steady_report_filename,
            sca_eclipse_steady_csv_result_filename=sca_eclipse_steady_csv_result_filename,
            sca_grype_report_filename=sca_grype_report_filename,
            sca_grype_csv_result_filename=sca_grype_csv_result_filename,
            sca_snyk_report_filename=sca_snyk_report_filename,
            sca_snyk_csv_result_filename=sca_snyk_csv_result_filename,
            sca_owasp_dependency_check_report_filename=sca_owasp_dependency_check_report_filename,
            sca_owasp_dependency_check_csv_result_filename=sca_owasp_dependency_check_csv_result_filename,
        )

    def test_get_json_value_missing_key(self):
        with open(OPENCSV_RESPONSE_JAVA, "r") as f:
            vulnerability_data = JSON.load(f)
        result = automated_vulnerability_results_report.get_json_value(vulnerability_data, "missing_key")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_missing_value(self):
        with open(OPENCSV_RESPONSE_EMPTY, "r") as f:
            vulnerability_data = JSON.load(f)
        result = automated_vulnerability_results_report.get_json_value(vulnerability_data, "description")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_three_key_missing_key_one(self):
        data = '{"one":{ "two": { "three": "value" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "missing", "two", "three")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_three_key_missing_key_two(self):
        data = '{"one":{ "two": { "three": "value" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "missing", "three")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_three_key_missing_key_three(self):
        data = '{"one":{ "two": { "three": "value" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "two", "missing")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_three_key_no_value(self):
        data = '{"one":{ "two": { "three": "" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "two", "three")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_two_key_missing_key_one(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "missing", "two")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_two_key_missing_key_two(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "missing")
        self.assertEqual(result, "Unknown")

    def test_get_json_value_two_key_no_value(self):
        data = '{"one":{ "two": "" }}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "two")
        self.assertEqual(result, "Unknown")

    def test_write_csv_report_header_invalid_tool_type(self):
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.write_csv_report_header("invalid", CSV_HORUSEC_JAVA_RESULT_PATH)
        self.assertEqual(cm.exception.code, 1)

    def test_main_missing_tool(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # CodeQL testing
    def test_main_codeql_missing_github_project(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-codeql-csv-result-filename",
                CSV_CODEQL_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_codeql_no_report(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_OTHER,
                "--sast-codeql-csv-result-filename",
                CSV_CODEQL_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_codeql_no_vulnerabilities(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_OTHER,
                "--sast-codeql-csv-result-filename",
                CSV_CODEQL_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_codeql_java(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_JAVA,
                "--sast-codeql-csv-result-filename",
                CSV_CODEQL_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_codeql_javascript(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_JAVASCRIPT,
                "--sast-codeql-csv-result-filename",
                CSV_CODEQL_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_codeql_python(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_PYTHON,
                "--sast-codeql-csv-result-filename",
                CSV_CODEQL_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # DeepSource testing
    def test_main_deepsource_missing_github_project(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--deepsource-api-key",
                DEEPSOURCE_API_KEY,
                "--sast-deepsource-csv-result-filename",
                CSV_DEEPSOURCE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_deepsource_no_report(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_OTHER,
                "--deepsource-api-key",
                DEEPSOURCE_API_KEY,
                "--sast-deepsource-csv-result-filename",
                CSV_DEEPSOURCE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_deepsource_get_request",
        side_effect=mocked_deepsource_response,
    )
    def test_main_deepsource_no_vulnerabilities(self, mock_vulnerability_response, mock_deepsource_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_OTHER,
                "--deepsource-api-key",
                DEEPSOURCE_API_KEY,
                "--sast-deepsource-csv-result-filename",
                CSV_DEEPSOURCE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_deepsource_get_request",
        side_effect=mocked_deepsource_response,
    )
    def test_main_deepsource_java(self, mock_vulnerability_response, mock_deepsource_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_JAVA,
                "--deepsource-api-key",
                DEEPSOURCE_API_KEY,
                "--sast-deepsource-csv-result-filename",
                CSV_DEEPSOURCE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_deepsource_get_request",
        side_effect=mocked_deepsource_response,
    )
    def test_main_deepsource_javascript(self, mock_vulnerability_response, mock_deepsource_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_JAVASCRIPT,
                "--deepsource-api-key",
                DEEPSOURCE_API_KEY,
                "--sast-deepsource-csv-result-filename",
                CSV_DEEPSOURCE_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_deepsource_get_request",
        side_effect=mocked_deepsource_response,
    )
    def test_main_deepsource_python(self, mock_vulnerability_response, mock_deepsource_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_PYTHON,
                "--deepsource-api-key",
                DEEPSOURCE_API_KEY,
                "--sast-deepsource-csv-result-filename",
                CSV_DEEPSOURCE_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Horusec testing
    def test_main_horusec_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-horusec-report-filename",
                "missing.json",
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_horusec_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_NO_VULNERABILITIES,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_horusec_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_JAVA,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_horusec_javascript(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_JAVASCRIPT,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_horusec_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_PYTHON,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Semgrep testing
    def test_main_semgrep_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-semgrep-report-filename",
                "missing.json",
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_semgrep_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_NO_VULNERABILITIES,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_semgrep_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_JAVA,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_semgrep_javascript(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_JAVASCRIPT,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_semgrep_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_PYTHON,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # SonarQube testing
    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_get_sonarqube_cwe_ids(self, mock_sonarqube_response):
        file = open(SAST_SONARQUBE_HOTSPOTS_SHOW_REPORT_JAVA, "r")
        data = JSON.loads(file.read())
        result = automated_vulnerability_results_report.get_sonarqube_cwe_ids(data)
        self.assertEqual(result, ["CWE-798", "CWE-259"])

    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_get_sonarqube_hotspots_show_data_missing_key(self, mock_sonarqube_response):
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.get_sonarqube_hotspots_show_data(SONARQUBE_URL, SONARQUBE_TOKEN, "missing-key")
        self.assertEqual(cm.exception.code, 1)

    def test_main_sonarqube_missing_project_key(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sonarqube-url",
                SONARQUBE_URL,
                "--sonarqube-token",
                SONARQUBE_TOKEN,
                "--sast-sonarqube-csv-result-filename",
                CSV_SONARQUBE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_main_sonarqube_no_report(self, mock_sonarqube_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sonarqube-url",
                SONARQUBE_URL,
                "--sonarqube-token",
                SONARQUBE_TOKEN,
                "--sonarqube-project-key",
                "no-report",
                "--sast-sonarqube-csv-result-filename",
                CSV_SONARQUBE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_main_sonarqube_no_vulnerabilities(self, mock_vulnerability_response, mock_sonarqube_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sonarqube-url",
                SONARQUBE_URL,
                "--sonarqube-token",
                SONARQUBE_TOKEN,
                "--sonarqube-project-key",
                SONARQUBE_PROJECT_KEY_OTHER,
                "--sast-sonarqube-csv-result-filename",
                CSV_SONARQUBE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_main_sonarqube_java(self, mock_vulnerability_response, mock_sonarqube_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sonarqube-url",
                SONARQUBE_URL,
                "--sonarqube-token",
                SONARQUBE_TOKEN,
                "--sonarqube-project-key",
                SONARQUBE_PROJECT_KEY_JAVA,
                "--sast-sonarqube-csv-result-filename",
                CSV_SONARQUBE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_main_sonarqube_javascript(self, mock_vulnerability_response, mock_sonarqube_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sonarqube-url",
                SONARQUBE_URL,
                "--sonarqube-token",
                SONARQUBE_TOKEN,
                "--sonarqube-project-key",
                SONARQUBE_PROJECT_KEY_JAVASCRIPT,
                "--sast-sonarqube-csv-result-filename",
                CSV_SONARQUBE_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_sonarqube_get_request",
        side_effect=mocked_sonarqube_response,
    )
    def test_main_sonarqube_python(self, mock_vulnerability_response, mock_sonarqube_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sonarqube-url",
                SONARQUBE_URL,
                "--sonarqube-token",
                SONARQUBE_TOKEN,
                "--sonarqube-project-key",
                SONARQUBE_PROJECT_KEY_PYTHON,
                "--sast-sonarqube-csv-result-filename",
                CSV_SONARQUBE_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Snyk Code testing
    def test_main_snyk_code_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-snyk-code-report-filename",
                "missing.json",
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_snyk_code_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_NO_VULNERABILITIES,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_snyk_code_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_JAVA,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_snyk_code_javascript(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_JAVASCRIPT,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_snyk_code_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_PYTHON,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Dependabot testing
    def test_main_dependabot_missing_github_project(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-dependabot-csv-result-filename",
                CSV_DEPENDABOT_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_dependabot_no_report(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_OTHER,
                "--sca-dependabot-csv-result-filename",
                CSV_DEPENDABOT_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_dependabot_no_vulnerabilities(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_OTHER,
                "--sca-dependabot-csv-result-filename",
                CSV_DEPENDABOT_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_dependabot_java(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_JAVA,
                "--sca-dependabot-csv-result-filename",
                CSV_DEPENDABOT_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_dependabot_javascript(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_JAVASCRIPT,
                "--sca-dependabot-csv-result-filename",
                CSV_DEPENDABOT_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    @patch(
        "main.python3.automated_vulnerability_results_report.send_github_get_request",
        side_effect=mocked_github_response,
    )
    def test_main_dependabot_python(self, mock_vulnerability_response, mock_github_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--github-organisation",
                GITHUB_ORGANISATION,
                "--github-repository",
                GITHUB_REPOSITORY_PYTHON,
                "--sca-dependabot-csv-result-filename",
                CSV_DEPENDABOT_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Eclipse Steady testing
    def test_main_eclipse_steady_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-eclipse-steady-report-filename",
                "missing.json",
                "--sca-eclipse-steady-csv-result-filename",
                CSV_ECLIPSE_STEADY_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_eclipse_steady_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-eclipse-steady-report-filename",
                SCA_ECLIPSE_STEADY_REPORT_NO_VULNERABILITIES,
                "--sca-eclipse-steady-csv-result-filename",
                CSV_ECLIPSE_STEADY_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_eclipse_steady_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-eclipse-steady-report-filename",
                SCA_ECLIPSE_STEADY_REPORT_JAVA,
                "--sca-eclipse-steady-csv-result-filename",
                CSV_ECLIPSE_STEADY_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_eclipse_steady_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-eclipse-steady-report-filename",
                SCA_ECLIPSE_STEADY_REPORT_PYTHON,
                "--sca-eclipse-steady-csv-result-filename",
                CSV_ECLIPSE_STEADY_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Grype testing
    def test_main_grype_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-grype-report-filename",
                "missing.json",
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_grype_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_NO_VULNERABILITIES,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_grype_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_JAVA,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_grype_javascript(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_JAVASCRIPT,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_grype_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_PYTHON,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Snyk testing
    def test_main_snyk_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-snyk-report-filename",
                "missing.json",
                "--sca-snyk-csv-result-filename",
                CSV_SNYK_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_snyk_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-snyk-report-filename",
                SCA_SNYK_REPORT_NO_VULNERABILITIES,
                "--sca-snyk-csv-result-filename",
                CSV_SNYK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_snyk_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-snyk-report-filename",
                SCA_SNYK_REPORT_JAVA,
                "--sca-snyk-csv-result-filename",
                CSV_SNYK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_snyk_javascript(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-snyk-report-filename",
                SCA_SNYK_REPORT_JAVASCRIPT,
                "--sca-snyk-csv-result-filename",
                CSV_SNYK_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_snyk_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-snyk-report-filename",
                SCA_SNYK_REPORT_PYTHON,
                "--sca-snyk-csv-result-filename",
                CSV_SNYK_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # OWASP Dependency Check testing
    def test_main_owasp_dependency_check_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-owasp-dependency-check-report-filename",
                "missing.json",
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_owasp_dependency_check_no_dependencies(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_DEPENDENCIES,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    def test_main_owasp_dependency_check_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_VULNERABILITIES,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_owasp_dependency_check_java(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVA,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_owasp_dependency_check_javascript(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVASCRIPT,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_vulnerability_get_request",
        side_effect=mocked_vulnerability_response,
    )
    def test_main_owasp_dependency_check_python(self, mock_vulnerability_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--github-token",
                GITHUB_TOKEN,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_PYTHON,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @classmethod
    def tearDownClass(cls):
        sys.stdout = sys.__stdout__
        for csv_file in os.listdir(f"{SOURCE_DIRECTORY}"):
            if csv_file.endswith(".csv"):
                os.remove(os.path.join(f"{SOURCE_DIRECTORY}", csv_file))


if __name__ == "__main__":
    unittest.main()
