#!/usr/bin/env python3

import os
import sys
import logging
import unittest
import json as JSON
from argparse import Namespace
from unittest.mock import patch
from main.python3 import automated_vulnerability_results_report


TEST_DIRECTORY_RESOURCES = os.path.dirname(os.path.realpath(__file__)) + "/resources/"

# Report filenames with no vulnerabilities
SAST_HORUSEC_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sast-horusec/other/horusec-report-no-vulnerabilities.json"
)
SAST_SEMGREP_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sast-semgrep/other/semgrep-report-no-vulnerabilities.json"
)
SAST_SNYK_CODE_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sast-snyk-code/other/snyk-code-report-no-vulnerabilities.json"
)
SCA_GRYPE_REPORT_NO_VULNERABILITIES = TEST_DIRECTORY_RESOURCES + "sca-grype/other/grype-report-no-vulnerabilities.json"
SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/other/owasp-dependency-check-report-no-vulnerabilities.json"
)
SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_DEPENDENCIES = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/other/owasp-dependency-check-report-no-dependencies.json"
)

# Report filenames
SAST_HORUSEC_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-horusec/java/horusec-report.json"
SAST_HORUSEC_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-horusec/javascript/horusec-report.json"
SAST_HORUSEC_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-horusec/python/horusec-report.json"

SAST_SEMGREP_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-semgrep/java/semgrep-report.json"
SAST_SEMGREP_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-semgrep/javascript/semgrep-report.json"
SAST_SEMGREP_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-semgrep/python/semgrep-report.json"

SAST_SNYK_CODE_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/java/snyk-code-report.json"
SAST_SNYK_CODE_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/javascript/snyk-code-report.json"
SAST_SNYK_CODE_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-snyk-code/python/snyk-code-report.json"

SCA_GRYPE_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sca-grype/java/grype-report.json"
SCA_GRYPE_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sca-grype/javascript/grype-report.json"
SCA_GRYPE_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sca-grype/python/grype-report.json"

SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVA = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/java/owasp-dependency-check-report.json"
)
SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVASCRIPT = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/javascript/owasp-dependency-check-report.json"
)
SCA_OWASP_DEPENDENCY_CHECK_REPORT_PYTHON = (
    TEST_DIRECTORY_RESOURCES + "sca-owasp-dependency-check/python/owasp-dependency-check-report.json"
)

# CSV result filenames
CSV_HORUSEC_JAVA_RESULT_FILENAME = "sast_horusec_results_java.csv"
CSV_HORUSEC_JAVASCRIPT_RESULT_FILENAME = "sast_horusec_results_javascript.csv"
CSV_HORUSEC_PYTHON_RESULT_FILENAME = "sast_horusec_results_python.csv"

CSV_SEMGREP_JAVA_RESULT_FILENAME = "sast_semgrep_results_java.csv"
CSV_SEMGREP_JAVASCRIPT_RESULT_FILENAME = "sast_semgrep_results_javascript.csv"
CSV_SEMGREP_PYTHON_RESULT_FILENAME = "sast_semgrep_results_python.csv"

CSV_SNYK_CODE_JAVA_RESULT_FILENAME = "sast_snyk_code_results_java.csv"
CSV_SNYK_CODE_JAVASCRIPT_RESULT_FILENAME = "sast_snyk_code_results_javascript.csv"
CSV_SNYK_CODE_PYTHON_RESULT_FILENAME = "sast_snyk_code_results_python.csv"

CSV_GRYPE_JAVA_RESULT_FILENAME = "sca_grype_results_java.csv"
CSV_GRYPE_JAVASCRIPT_RESULT_FILENAME = "sca_grype_results_javascript.csv"
CSV_GRYPE_PYTHON_RESULT_FILENAME = "sca_grype_results_python.csv"

CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME = "sca_owasp_dependency_check_results_java.csv"
CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_FILENAME = "sca_owasp_dependency_check_results_javascript.csv"
CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_FILENAME = "sca_owasp_dependency_check_results_python.csv"

# CSV result paths
CSV_HORUSEC_JAVA_RESULT_PATH = f"../../main/python3/{CSV_HORUSEC_JAVA_RESULT_FILENAME}"
CSV_HORUSEC_JAVASCRIPT_RESULT_PATH = f"../../main/python3/{CSV_HORUSEC_JAVASCRIPT_RESULT_FILENAME}"
CSV_HORUSEC_PYTHON_RESULT_PATH = f"../../main/python3/{CSV_HORUSEC_PYTHON_RESULT_FILENAME}"

CSV_SEMGREP_JAVA_RESULT_PATH = f"../../main/python3/{CSV_SEMGREP_JAVA_RESULT_FILENAME}"
CSV_SEMGREP_JAVASCRIPT_RESULT_PATH = f"../../main/python3/{CSV_SEMGREP_JAVASCRIPT_RESULT_FILENAME}"
CSV_SEMGREP_PYTHON_RESULT_PATH = f"../../main/python3/{CSV_SEMGREP_PYTHON_RESULT_FILENAME}"

CSV_SNYK_CODE_JAVA_RESULT_PATH = f"../../main/python3/{CSV_SNYK_CODE_JAVA_RESULT_FILENAME}"
CSV_SNYK_CODE_JAVASCRIPT_RESULT_PATH = f"../../main/python3/{CSV_SNYK_CODE_JAVASCRIPT_RESULT_FILENAME}"
CSV_SNYK_CODE_PYTHON_RESULT_PATH = f"../../main/python3/{CSV_SNYK_CODE_PYTHON_RESULT_FILENAME}"

CSV_GRYPE_JAVA_RESULT_PATH = f"../../main/python3/{CSV_GRYPE_JAVA_RESULT_FILENAME}"
CSV_GRYPE_JAVASCRIPT_RESULT_PATH = f"../../main/python3/{CSV_GRYPE_JAVASCRIPT_RESULT_FILENAME}"
CSV_GRYPE_PYTHON_RESULT_PATH = f"../../main/python3/{CSV_GRYPE_PYTHON_RESULT_FILENAME}"

CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_PATH = f"../../main/python3/{CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME}"
CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_PATH = (
    f"../../main/python3/{CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_FILENAME}"
)
CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_PATH = (
    f"../../main/python3/{CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_FILENAME}"
)

# OpenCVE responses
OPENCSV_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "opencve/other/opencve-empty-response.json"
OPENCSV_RESPONSE_JAVA = TEST_DIRECTORY_RESOURCES + "opencve/java/opencve-response.json"
OPENCSV_RESPONSE_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "opencve/javascript/opencve-response.json"
OPENCSV_RESPONSE_PYTHON = TEST_DIRECTORY_RESOURCES + "opencve/python/opencve-response.json"

# NVD responses
NVD_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-empty-response.json"
NVD_RESPONSE_NO_CVE = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-no-cwe-response.json"
NVD_RESPONSE_MULTIPLE_CVE = TEST_DIRECTORY_RESOURCES + "nvd/other/nvd-multiple-cwe-response.json"
NVD_RESPONSE_JAVA = TEST_DIRECTORY_RESOURCES + "nvd/java/nvd-response.json"
NVD_RESPONSE_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "nvd/javascript/nvd-response.json"
NVD_RESPONSE_PYTHON = TEST_DIRECTORY_RESOURCES + "nvd/python/nvd-response.json"

NVD_API_KEY = "11111111-2222-3333-4444-555555555555"
OPENCVE_USERNAME = "username"
OPENCVE_PASSWORD = "password"

# CWE IDs for mock responses
CWE_JAVA = "CWE-327"
CWE_JAVASCRIPT = "CWE-223"
CWE_PYTHON = "CWE-798"
CWE_NO_DESCRIPTION = "CWE-111"

# CVE IDs for mock responses
CVE_JAVA = "CVE-2022-42004"
CVE_JAVASCRIPT = "CVE-2020-15366"
CVE_PYTHON = "CVE-2022-24303"
CVE_NOT_FOUND = "CVE-2020-8203"
CVE_NO_CWE = "CVE-2018-18442"
CVE_MULTIPLE_CWE = "CVE-2021-44228"


def mocked_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if CWE_JAVA in args[0]:
        return MockResponse(OPENCSV_RESPONSE_JAVA, 200)
    elif CWE_JAVASCRIPT in args[0]:
        return MockResponse(OPENCSV_RESPONSE_JAVASCRIPT, 200)
    elif CWE_PYTHON in args[0]:
        return MockResponse(OPENCSV_RESPONSE_PYTHON, 200)
    elif CVE_JAVA in args[0]:
        return MockResponse(NVD_RESPONSE_JAVA, 200)
    elif CVE_JAVASCRIPT in args[0]:
        return MockResponse(NVD_RESPONSE_JAVASCRIPT, 200)
    elif CVE_PYTHON in args[0]:
        return MockResponse(NVD_RESPONSE_PYTHON, 200)
    elif CVE_NOT_FOUND in args[0]:
        return MockResponse(NVD_RESPONSE_EMPTY, 200)
    elif CVE_NO_CWE in args[0]:
        return MockResponse(NVD_RESPONSE_NO_CVE, 200)
    elif CVE_MULTIPLE_CWE in args[0]:
        return MockResponse(NVD_RESPONSE_MULTIPLE_CVE, 200)
    else:
        return None


class DevNull:
    def __init__(self):
        pass

    def write(self, s):
        pass


@patch("sys.stdout", new=DevNull())
@patch("sys.stderr", new=DevNull())
class TestAutomatedVulnerabilityResultsReport(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAutomatedVulnerabilityResultsReport, self).__init__(*args, **kwargs)

    @classmethod
    def setUpClass(cls):
        automated_vulnerability_results_report.log = logging.getLogger()
        automated_vulnerability_results_report.log.setLevel(logging.INFO)
        with open(os.devnull, "w") as f:
            sys.stdout = f

    def __mock_args(
        self,
        nvd_api_key: str,
        opencve_username: str,
        opencve_password: str,
        sast_horusec_report_filename: str,
        sast_horusec_csv_result_filename: str,
        sast_semgrep_report_filename: str,
        sast_semgrep_csv_result_filename: str,
        sast_snyk_code_report_filename: str,
        sast_snyk_code_csv_result_filename: str,
        sca_grype_report_filename: str,
        sca_grype_csv_result_filename: str,
        sca_owasp_dependency_check_report_filename: str,
        sca_owasp_dependency_check_csv_result_filename: str,
        sca_snyk_report_filename: str,
        sca_snyk_csv_result_filename: str,
    ) -> Namespace:
        """Mock arguments in argparse.Namespace type

        :parameter
            nvd_api_key:str -- NVD API Key to be mocked in the arguments
            opencve_username:str -- OpenCVE username to be mocked in the arguments
            opencve_password:str -- OpenCVE password to be mocked in the arguments
            sast_horusec_report_filename:str -- Name of the SAST Horusec report
            sast_horusec_csv_result_filename:str -- Name of the SAST Horusec CSV result
            sast_semgrep_report_filename:str -- Name of the SAST Semgrep report
            sast_semgrep_csv_result_filename:str -- Name of the SAST Semgrep CSV result
            sast_snyk_code_report_filename:str -- Name of the SAST Snyk-Code report
            sast_snyk_code_csv_result_filename:str -- Name of the SAST Snyk-Code CSV result
            sca_grype_report_filename:str -- Name of the SCA Grype report
            sca_grype_csv_result_filename:str -- Name of the SCA Grype CSV result
            sca_owasp_dependency_check_report_filename:str -- Name of the SCA OWASP Dependency Check report
            sca_owasp_dependency_check_csv_result_filename:str -- Name of the SCA OWASP Dependency Check CSV result
            sca_snyk_report_filename:str -- Name of the SCA Snyk report
            sca_snyk_csv_result_filename:str -- Name of the SCA Snyk CSV result

        :return
            argparse.Namespace -- Mocked arguments
        """
        return Namespace(
            nvd_api_key=nvd_api_key,
            opencve_username=opencve_username,
            opencve_password=opencve_password,
            sast_horusec_report_filename=sast_horusec_report_filename,
            sast_horusec_csv_result_filename=sast_horusec_csv_result_filename,
            sast_semgrep_report_filename=sast_semgrep_report_filename,
            sast_semgrep_csv_result_filename=sast_semgrep_csv_result_filename,
            sast_snyk_code_report_filename=sast_snyk_code_report_filename,
            sast_snyk_code_csv_result_filename=sast_snyk_code_csv_result_filename,
            sca_grype_report_filename=sca_grype_report_filename,
            sca_grype_csv_result_filename=sca_grype_csv_result_filename,
            sca_owasp_dependency_check_report_filename=sca_owasp_dependency_check_report_filename,
            sca_owasp_dependency_check_csv_result_filename=sca_owasp_dependency_check_csv_result_filename,
            sca_snyk_report_filename=sca_snyk_report_filename,
            sca_snyk_csv_result_filename=sca_snyk_csv_result_filename,
        )

    def test_get_json_value_missing_key(self):
        with open(OPENCSV_RESPONSE_JAVA, "r") as f:
            vulnerability_data = JSON.load(f)
        result = automated_vulnerability_results_report.get_json_value(vulnerability_data, "missing_key")
        self.assertEqual(result, "N/A")

    def test_get_json_value_missing_value(self):
        with open(OPENCSV_RESPONSE_EMPTY, "r") as f:
            vulnerability_data = JSON.load(f)
        result = automated_vulnerability_results_report.get_json_value(vulnerability_data, "description")
        self.assertEqual(result, "N/A")

    def test_get_json_value_three_key_missing_key_one(self):
        data = '{"one":{ "two": { "three": "value" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "missing", "two", "three")
        self.assertEqual(result, "N/A")

    def test_get_json_value_three_key_missing_key_two(self):
        data = '{"one":{ "two": { "three": "value" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "missing", "three")
        self.assertEqual(result, "N/A")

    def test_get_json_value_three_key_missing_key_three(self):
        data = '{"one":{ "two": { "three": "value" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "two", "missing")
        self.assertEqual(result, "N/A")

    def test_get_json_value_three_key_no_value(self):
        data = '{"one":{ "two": { "three": "" }}}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "two", "three")
        self.assertEqual(result, "N/A")

    def test_get_json_value_two_key_missing_key_one(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "missing", "two")
        self.assertEqual(result, "N/A")

    def test_get_json_value_two_key_missing_key_two(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "missing")
        self.assertEqual(result, "N/A")

    def test_get_json_value_two_key_no_value(self):
        data = '{"one":{ "two": "" }}'
        data = JSON.loads(data)
        result = automated_vulnerability_results_report.get_json_value(data, "one", "two")
        self.assertEqual(result, "N/A")

    def test_write_csv_report_header_invalid_tool_type(self):
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.write_csv_report_header("invalid", CSV_HORUSEC_JAVA_RESULT_PATH)
        self.assertEqual(cm.exception.code, 1)

    # Horusec testing
    def test_main_horusec_missing_tool(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    def test_main_horusec_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                "missing.json",
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_horusec_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_NO_VULNERABILITIES,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_horusec_java(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_JAVA,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_horusec_javascript(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_JAVASCRIPT,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_horusec_python(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_PYTHON,
                "--sast-horusec-csv-result-filename",
                CSV_HORUSEC_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Semgrep testing
    def test_main_semgrep_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-semgrep-report-filename",
                "missing.json",
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_semgrep_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_NO_VULNERABILITIES,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_semgrep_java(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_JAVA,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_semgrep_javascript(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_JAVASCRIPT,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_semgrep_python(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-semgrep-report-filename",
                SAST_SEMGREP_REPORT_PYTHON,
                "--sast-semgrep-csv-result-filename",
                CSV_SEMGREP_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Snyk Code testing
    def test_main_snyk_code_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-snyk-code-report-filename",
                "missing.json",
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_snyk_code_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_NO_VULNERABILITIES,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_snyk_code_java(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_JAVA,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_snyk_code_javascript(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_JAVASCRIPT,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_snyk_code_python(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-snyk-code-report-filename",
                SAST_SNYK_CODE_REPORT_PYTHON,
                "--sast-snyk-code-csv-result-filename",
                CSV_SNYK_CODE_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # Grype testing
    def test_main_grype_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-grype-report-filename",
                "missing.json",
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_grype_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_NO_VULNERABILITIES,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_grype_java(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_JAVA,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_grype_javascript(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_JAVASCRIPT,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_grype_python(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-grype-report-filename",
                SCA_GRYPE_REPORT_PYTHON,
                "--sca-grype-csv-result-filename",
                CSV_GRYPE_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # OWASP Dependency Check testing
    def test_main_owasp_dependency_check_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-owasp-dependency-check-report-filename",
                "missing.json",
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_owasp_dependency_check_no_dependencies(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_DEPENDENCIES,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    def test_main_owasp_dependency_check_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_NO_VULNERABILITIES,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_owasp_dependency_check_java(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVA,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_owasp_dependency_check_javascript(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_JAVASCRIPT,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_owasp_dependency_check_python(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sca-owasp-dependency-check-report-filename",
                SCA_OWASP_DEPENDENCY_CHECK_REPORT_PYTHON,
                "--sca-owasp-dependency-check-csv-result-filename",
                CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_FILENAME,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @classmethod
    def tearDownClass(cls):
        sys.stdout = sys.__stdout__
        if os.path.isfile(CSV_HORUSEC_JAVA_RESULT_PATH):
            os.remove(CSV_HORUSEC_JAVA_RESULT_PATH)
        if os.path.isfile(CSV_HORUSEC_JAVASCRIPT_RESULT_PATH):
            os.remove(CSV_HORUSEC_JAVASCRIPT_RESULT_PATH)
        if os.path.isfile(CSV_HORUSEC_PYTHON_RESULT_PATH):
            os.remove(CSV_HORUSEC_PYTHON_RESULT_PATH)
        if os.path.isfile(CSV_SEMGREP_JAVA_RESULT_PATH):
            os.remove(CSV_SEMGREP_JAVA_RESULT_PATH)
        if os.path.isfile(CSV_SEMGREP_JAVASCRIPT_RESULT_PATH):
            os.remove(CSV_SEMGREP_JAVASCRIPT_RESULT_PATH)
        if os.path.isfile(CSV_SEMGREP_PYTHON_RESULT_PATH):
            os.remove(CSV_SEMGREP_PYTHON_RESULT_PATH)
        if os.path.isfile(CSV_SNYK_CODE_JAVA_RESULT_PATH):
            os.remove(CSV_SNYK_CODE_JAVA_RESULT_PATH)
        if os.path.isfile(CSV_SNYK_CODE_JAVASCRIPT_RESULT_PATH):
            os.remove(CSV_SNYK_CODE_JAVASCRIPT_RESULT_PATH)
        if os.path.isfile(CSV_SNYK_CODE_PYTHON_RESULT_PATH):
            os.remove(CSV_SNYK_CODE_PYTHON_RESULT_PATH)
        if os.path.isfile(CSV_GRYPE_JAVA_RESULT_PATH):
            os.remove(CSV_GRYPE_JAVA_RESULT_PATH)
        if os.path.isfile(CSV_GRYPE_JAVASCRIPT_RESULT_PATH):
            os.remove(CSV_GRYPE_JAVASCRIPT_RESULT_PATH)
        if os.path.isfile(CSV_GRYPE_PYTHON_RESULT_PATH):
            os.remove(CSV_GRYPE_PYTHON_RESULT_PATH)
        if os.path.isfile(CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_PATH):
            os.remove(CSV_OWASP_DEPENDENCY_CHECK_JAVA_RESULT_PATH)
        if os.path.isfile(CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_PATH):
            os.remove(CSV_OWASP_DEPENDENCY_CHECK_JAVASCRIPT_RESULT_PATH)
        if os.path.isfile(CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_PATH):
            os.remove(CSV_OWASP_DEPENDENCY_CHECK_PYTHON_RESULT_PATH)


if __name__ == "__main__":
    unittest.main()
