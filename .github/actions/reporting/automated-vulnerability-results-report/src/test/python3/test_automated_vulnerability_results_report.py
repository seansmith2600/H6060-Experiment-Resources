#!/usr/bin/env python3

import os
import sys
import logging
import unittest
import json as JSON
from argparse import Namespace
from unittest.mock import patch
from main.python3 import automated_vulnerability_results_report


TEST_DIRECTORY_RESOURCES = os.path.dirname(os.path.realpath(__file__)) + "/resources/"

SAST_HORUSEC_REPORT_NO_VULNERABILITIES = (
    TEST_DIRECTORY_RESOURCES + "sast-horusec/other/horusec-report-no-vulnerabilities.json"
)
SAST_HORUSEC_REPORT_JAVA = TEST_DIRECTORY_RESOURCES + "sast-horusec/java/horusec-report.json"
SAST_HORUSEC_REPORT_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "sast-horusec/javascript/horusec-report.json"
SAST_HORUSEC_REPORT_PYTHON = TEST_DIRECTORY_RESOURCES + "sast-horusec/python/horusec-report.json"

OPENCSV_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "opencve/other/opencve-empty-response.json"
OPENCSV_RESPONSE_JAVA = TEST_DIRECTORY_RESOURCES + "opencve/java/opencve-response.json"
OPENCSV_RESPONSE_JAVASCRIPT = TEST_DIRECTORY_RESOURCES + "opencve/javascript/opencve-response.json"
OPENCSV_RESPONSE_PYTHON = TEST_DIRECTORY_RESOURCES + "opencve/python/opencve-response.json"

SAST_HORUSEC_RESULTS_CSV = "../../main/python3/sast_horusec_results.csv"

NVD_API_KEY = "11111111-2222-3333-4444-555555555555"
OPENCVE_USERNAME = "username"
OPENCVE_PASSWORD = "password"

CWE_JAVA = "CWE-327"
CWE_JAVASCRIPT = "CWE-223"
CWE_PYTHON = "CWE-798"
CWE_NO_DESCRIPTION = "CWE-111"


def mocked_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if CWE_JAVA in args[0]:
        return MockResponse(OPENCSV_RESPONSE_JAVA, 200)
    elif CWE_JAVASCRIPT in args[0]:
        return MockResponse(OPENCSV_RESPONSE_JAVASCRIPT, 200)
    elif CWE_PYTHON in args[0]:
        return MockResponse(OPENCSV_RESPONSE_PYTHON, 200)
    else:
        return None


class DevNull:
    def __init__(self):
        pass

    def write(self, s):
        pass


@patch("sys.stdout", new=DevNull())
@patch("sys.stderr", new=DevNull())
class TestAutomatedVulnerabilityResultsReport(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAutomatedVulnerabilityResultsReport, self).__init__(*args, **kwargs)

    @classmethod
    def setUpClass(cls):
        automated_vulnerability_results_report.log = logging.getLogger()
        automated_vulnerability_results_report.log.setLevel(logging.INFO)
        with open(os.devnull, "w") as f:
            sys.stdout = f

    def __mock_args(
        self,
        nvd_api_key: str,
        opencve_username: str,
        opencve_password: str,
        sast_horusec_report_filename: str,
        sast_semgrep_report_filename: str,
        sast_snyk_code_report_filename: str,
        sca_grype_report_filename: str,
        sca_owasp_dependency_check_report_filename: str,
        sca_snyk_report_filename: str,
    ) -> Namespace:
        """Mock arguments in argparse.Namespace type

        :parameter
            nvd_api_key:str -- NVD API Key to be mocked in the arguments
            opencve_username:str -- OpenCVE username to be mocked in the arguments
            opencve_password:str -- OpenCVE password to be mocked in the arguments
            sast_horusec_report_filename:str -- Name of the SAST Horusec report
            sast_semgrep_report_filename:str -- Name of the SAST Semgrep report
            sast_snyk_code_report_filename:str -- Name of the SAST Snyk-Code report
            sca_grype_report_filename:str -- Name of the SCA Grype report
            sca_owasp_dependency_check_report_filename:str -- Name of the SCA OWASP Dependency Check report
            sca_snyk_report_filename:str -- Name of the SCA Snyk report

        :return
            argparse.Namespace -- Mocked arguments
        """
        return Namespace(
            nvd_api_key=nvd_api_key,
            opencve_username=opencve_username,
            opencve_password=opencve_password,
            sast_horusec_report_filename=sast_horusec_report_filename,
            sast_semgrep_report_filename=sast_semgrep_report_filename,
            sast_snyk_code_report_filename=sast_snyk_code_report_filename,
            sca_grype_report_filename=sca_grype_report_filename,
            sca_owasp_dependency_check_report_filename=sca_owasp_dependency_check_report_filename,
            sca_snyk_report_filename=sca_snyk_report_filename,
        )

    def test_get_json_value_missing_key(self):
        with open(OPENCSV_RESPONSE_JAVA, "r") as f:
            vulnerability_data = JSON.load(f)
        result = automated_vulnerability_results_report.get_json_value(vulnerability_data, "missing_key")
        self.assertEqual(result, "N/A")

    def test_get_json_value_missing_value(self):
        with open(OPENCSV_RESPONSE_EMPTY, "r") as f:
            vulnerability_data = JSON.load(f)
        result = automated_vulnerability_results_report.get_json_value(vulnerability_data, "description")
        self.assertEqual(result, "N/A")

    def test_write_csv_report_header_invalid_tool_type(self):
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.write_csv_report_header("invalid", SAST_HORUSEC_RESULTS_CSV)
        self.assertEqual(cm.exception.code, 1)

    def test_main_horusec_missing_tool(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    def test_main_horusec_missing_file(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                "missing.json",
            ]
        )
        with self.assertRaises(SystemExit) as cm:
            automated_vulnerability_results_report.main(args)
        self.assertEqual(cm.exception.code, 1)

    def test_main_horusec_no_vulnerabilities(self):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_NO_VULNERABILITIES,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_horusec_java(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_JAVA,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_horusec_javascript(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_JAVASCRIPT,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.automated_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_horusec_python(self, mock_response):
        args = automated_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--sast-horusec-report-filename",
                SAST_HORUSEC_REPORT_PYTHON,
            ]
        )
        result = automated_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @classmethod
    def tearDownClass(cls):
        sys.stdout = sys.__stdout__
        if os.path.isfile(SAST_HORUSEC_RESULTS_CSV):
            os.remove(SAST_HORUSEC_RESULTS_CSV)


if __name__ == "__main__":
    unittest.main()
