{
  "data": {
    "repository": {
      "issues": {
        "totalCount": 12,
        "edges": [
          {
            "node": {
              "issue": {
                "title": "Audit required: Use of `pickle` module",
                "tags": [
                  "cwe",
                  "a08",
                  "cwe-798",
                  "sans-top-25",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B301",
                "shortDescription": "The [pickle](https://docs.python.org/3/library/pickle.html) module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6bHpwa29i",
                "description": "The [pickle](https://docs.python.org/3/library/pickle.html) module is not secure against erroneous or maliciously constructed data. Never unpickle data received from an untrusted or unauthenticated source.\n\n<!--more-->\nPython's `pickle` module is used for serializing and de-serializing a Python object structure. Data serialization is the process of converting structured data to a format that allows sharing or storage of the data in a form that allows recovery of its original structure.\n\nInsecure deserialization is when an application deserializes the data that it gets without any kind of validation, or even the authenticity of the data. It is easy to execute arbitrary code when unpickling data. Unpickling can be exploited to execute arbitrary commands on your machine.\n\nIf `pickle` is not absolutely necessary for the use-case, consider using a safer serialization, like [PyYaml](https://pyyaml.org/wiki/PyYAMLDocumentation).PyYAML is a YAML parser and emitter for Python. YAML is language-agnostic and human-readable serialization format. But `pickle` has its advantages too. Pickle format is specific to Python and can represent a wide variety of data structures and objects where as YAML represents simple data types & structures in a language-portable manner.\n\nRecommended practices when using `pickle` module:\n\n- It should not be used between unknown parties. Unpickling data from malicious client can cause remote execution attack. Only unpickle data you trust.\n- Communicating parties should have an encrypted network connection. Otherwise, data to be unserialized can be modified and thus unsafe to pickle.\n- Consider signing data with [hmac](https://docs.python.org/3/library/hmac.html#module-hmac) if you need to ensure that it has not been tampered with. Pickle can be signed before storage or transmission, and its signature can be verified before loading it on the receiver side.\n\nRefer to [this blog post](https://www.synopsys.com/blogs/software-security/python-pickling/) to know more about dangers of using `pickle` module.\n\n### Bad practice\n```python\nfrom flask import request\n\nimport picke\n\n@app.route('/pickle')\ndef load():\n    data = request.GET.get(\"data\")\n    conf = pickle.load(data) # Insecure. Avoid using pickle\n```\n\n### Recommended\n```python\nfrom flask import request\n\nimport yaml\n\n@app.route('/yaml')\ndef load():\n    data = request.GET.get(\"data\")\n    conf = yaml.load(data) # Secure\n```\n\n## References:\n- OWASP Top 10 2021 Category A08 - [Software and Data Integrity Failures](https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/)\n- [SANS Top 25](https://www.sans.org/top25-software-errors/)\n- [CWE 502](https://cwe.mitre.org/data/definitions/502.html) - Deserialization of Untrusted Data\n- [pickle module](https://docs.python.org/3/library/pickle.html)\n- [yaml module](https://pyyaml.org/wiki/PyYAMLDocumentation)",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit required: Risk of possible SQL injection vector through string-based query construction",
                "tags": [
                  "cwe",
                  "a03",
                  "cwe-20",
                  "cwe-89",
                  "sans-top-25",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B608",
                "shortDescription": "Constructing SQL query using user provided data is insecure. It makes application vulnerable to [SQL injection]([SQL injection](https://owasp.org/www-community/attacks/SQL_Injection)) attacks.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6anprZGxi",
                "description": "Constructing SQL query using user provided data is insecure. It makes application vulnerable to [SQL injection]([SQL injection](https://owasp.org/www-community/attacks/SQL_Injection)) attacks.\n<!--more-->\nAn SQL injection attack consists of the insertion or “injection” of an SQL query via the input data given to an application. It is a very common attack vector. Unless care is taken to sanitize and control the input data when building such SQL statement strings, an injection attack becomes possible. It is possible for an attacker to craft queries to read, modify, or delete sensitive information from the database and sometimes even shut it down or execute arbitrary operating system commands.\n\nIt is recommended to ensure that the user-provided data is properly escaped and validated. Modern database adapters come with built-in tools for preventing Python SQL injection by using query parameters.\n\nSince this is an audit issue, some occurrences may be harmless here. The goal is to bring the issue to attention. Please make sure that the input string is trusted. If the occurrences don't seem to be valid, please feel free to ignore them.\n### Bad practice\n```python\ncursor = connection.cursor()\ncursor.execute(\"SELECT id FROM userdata WHERE Name =%s;\" % name)  # Sensitve. Query constructed based on user's input\n```\n\n### Recommended\n```python\ncursor = connection.cursor()\n# # Username is passed as a named parameter.\n# Database will use the specified type and value of username when executing the query\ncursor.execute(\"SELECT * FROM userdata WHERE Name = %s;\", (name,))\n```\n## References:\n- [SQL injection](https://owasp.org/www-community/attacks/SQL_Injection)\n- [SQL injection attacks with Python](https://realpython.com/prevent-python-sql-injection/)\n- OWASP Top 10 2021 Category A03 - [Injection](https://owasp.org/Top10/A03_2021-Injection/)\n- [SANS Top 25](https://www.sans.org/top25-software-errors/)\n- [CWE-20](https://cwe.mitre.org/data/definitions/20.html) - Improper input validation\n- [CWE 89](https://cwe.mitre.org/data/definitions/89.html) - Improper Neutralization of Special Elements used in an SQL Command",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit required: Use of an insecure method method from `urllib` detected",
                "tags": [
                  "cwe",
                  "a10",
                  "cwe-918",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B310",
                "shortDescription": "`urllib` not only opens `http://` or `https://` URLs, but also `ftp://` and `file://`.\nWith this, it might be possible to open local files on the executing machine which might be a security risk if the URL to open can be manipulated by an external user.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6eXp5cXF6",
                "description": "`urllib` not only opens `http://` or `https://` URLs, but also `ftp://` and `file://`.\nWith this, it might be possible to open local files on the executing machine which might be a security risk if the URL to open can be manipulated by an external user.\n\n <!--more-->\nThe `urllib.request` module defines functions and classes which help in opening URLs. `urllib.request.open` can open `ftp://` and `file://` URLs. This is usually not intended and makes the application vulnerable to [Server Side Request Forgery](https://owasp.org/www-community/attacks/Server_Side_Request_Forgery) attack.\nPerforming requests from user-provided data could allow attackers to make requests on the internal network or change, retrieve or delete sensitive information. You are yourself responsible for validating the URL before opening it with `urllib`.\n\nIt is recommended to validate the user-provided data, such as the URL and headers used to construct the request.\n\nSince this is an audit issue, some occurrences may be harmless here. The goal is to bring the issue in attention.\nPlease make sure that the url is trusted. If the occurrences doesn't seem to be valid, please feel free to ignore them.\n\n### Bad practice\n```\nreq = urllib.Request.request(url)\nresp = urllib.request.urlopen(req)\n```\n\n### Recommended\n```python\n# Validate URL before opening it\nif url.lower().startswith('http'):\n  req = urllib.Request.request(url)\nelse:\n  raise ValueError from None\n\nwith urllib.request.urlopen(req) as resp:\n  [...]\n\n## References:\n- OWASP Top 10 2021 Category A10 - [Server Side Request Forgery](https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/)\n- [CWE-918](https://cwe.mitre.org/data/definitions/918.html) - Server-Side Request Forgery (SSRF)\n```",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit required: Potential SQL injection on `extra` function",
                "tags": [
                  "cwe",
                  "a03",
                  "cwe-20",
                  "sans-top-25",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B610",
                "shortDescription": "Use of `extra` in Django querysets should be audited, since unsanitized strings can open up security vulnerabilities. It makes application vulnerable to [SQL injection]([SQL injection](https://owasp.org/www-community/attacks/SQL_Injection)) attacks.",
                "severity": "MINOR",
                "isRecommended": false,
                "id": "SXNzdWU6bHpvZGdi",
                "description": "Use of `extra` in Django querysets should be audited, since unsanitized strings can open up security vulnerabilities. It makes application vulnerable to [SQL injection]([SQL injection](https://owasp.org/www-community/attacks/SQL_Injection)) attacks.\n\n<!--more-->\nSometimes, the Django query syntax by itself can’t easily express a complex WHERE clause. For these edge cases, Django provides the [extra()](https://docs.djangoproject.com/en/3.2/ref/models/querysets/#django.db.models.query.QuerySet.extra) QuerySet modifier — a hook for injecting specific clauses into the SQL generated by a QuerySet.\n\n An SQL injection attack consists of insertion or “injection” of a SQL query via the input data given to an application. It is a very common attack vector.\n\nOne should be very careful whenever you use `extra()`. Use it only if you cannot express your query using other queryset methods.\n### Bad practice\n```python\nqs.extra(\n...     select={'val': \"select col from sometable where othercol = %s\"},\n...     select_params=(someparam,),\n)\n```\nExecuting above code snippet is equivalent to the following raw SQL with unsatized input:\n```python\nqs.annotate(val=RawSQL(\"select col from sometable where othercol = %s\", (someparam,)))\n```\n\n## References:\n- [extra() QuerySet modifier in Django](https://docs.djangoproject.com/en/3.2/ref/models/querysets/#django.db.models.query.QuerySet.extra)\n- [SQL injection protection in Django](https://docs.djangoproject.com/en/3.2/topics/security/#sql-injection-protection)\n- OWASP Top 10 2021 Category A03 - [Injection](https://owasp.org/Top10/A03_2021-Injection/)\n- [SANS Top 25](https://www.sans.org/top25-software-errors/)\n- [CWE 20](https://cwe.mitre.org/data/definitions/20.html) - Improper Input Validation",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit required: Potential SQL injection on `RawSQL` function",
                "tags": [
                  "a03",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B611",
                "shortDescription": "Use of `extra` in Django querysets should be audited, since unsanitized strings can open up security vulnerabilities.",
                "severity": "MINOR",
                "isRecommended": true,
                "id": "SXNzdWU6bXp2bm96",
                "description": "Use of `extra` in Django querysets should be audited, since unsanitized strings can open up security vulnerabilities.",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Function with cyclomatic complexity higher than threshold",
                "tags": [],
                "shortcode": "PY-R1000",
                "shortDescription": "A function with high cyclomatic complexity can be hard to understand and\nmaintain. Cyclomatic complexity is a software metric that measures the number of\nindependent paths through a function. A higher cyclomatic complexity indicates\nthat the function has more decision points and is more complex.",
                "severity": "MINOR",
                "isRecommended": false,
                "id": "SXNzdWU6enJnbG9u",
                "description": "A function with high cyclomatic complexity can be hard to understand and\nmaintain. Cyclomatic complexity is a software metric that measures the number of\nindependent paths through a function. A higher cyclomatic complexity indicates\nthat the function has more decision points and is more complex.\n\n<!--more-->\n\nFunctions with high cyclomatic complexity are more likely to have bugs and be\nharder to test. They may lead to reduced code maintainability and increased\ndevelopment time.\n\nTo reduce the cyclomatic complexity of a function, you can:\n\n- Break the function into smaller, more manageable functions.\n- Refactor complex logic into separate functions or classes.\n- Avoid multiple return paths and deeply nested control expressions.\n\n## Bad practice\n\n```python\ndef number_to_name():\n    number = input()\n    if not number.isdigit():\n        print(\"Enter a valid number\")\n        return\n\n    number = int(number)\n    if number >= 10:\n        print(\"Number is too big\")\n        return\n\n    if number == 1:\n        print(\"one\")\n    elif number == 2:\n        print(\"two\")\n    elif number == 3:\n        print(\"three\")\n    elif number == 4:\n        print(\"four\")\n    elif number == 5:\n        print(\"five\")\n    elif number == 6:\n        print(\"six\")\n    elif number == 7:\n        print(\"seven\")\n    elif number == 8:\n        print(\"eight\")\n    elif number == 9:\n        print(\"nine\")\n```\n\n## Recommended\n\n```python\ndef number_to_name():\n    number = input()\n    if not number.isdigit():\n        print(\"Enter a valid number\")\n        return\n\n    number = int(number)\n    if number >= 10:\n        print(\"Number is too big\")\n        return\n\n    names = {\n      1: \"one\",\n      2: \"two\",\n      3: \"three\",\n      4: \"four\",\n      5: \"five\",\n      6: \"six\",\n      7: \"seven\",\n      8: \"eight\",\n      9: \"nine\",\n    }\n    print(names[number])\n```\n\n### Issue configuration\n\nCyclomatic complexity threshold can be configured using the\n`cyclomatic_complexity_threshold` [meta field](https://docs.deepsource.com/docs/analyzers-python#cyclomatic_complexity_threshold) in the\n`.deepsource.toml` config file.\nConfiguring this is optional. If you don't provide a value, the Analyzer will\nraise issues for functions with complexity higher than the default threshold,\nwhich is `medium` for the Python Analyzer.\n\nHere's the mapping of the risk category to the cyclomatic complexity score to\nhelp you configure this better:\n\n| Risk category | Cyclomatic complexity range | Recommended action                                                                                         |\n| :------------ | :-------------------------- | :--------------------------------------------------------------------------------------------------------- |\n| low           | 1-5                         | No action needed.                                                                                          |\n| medium        | 6-15                        | Review and monitor.                                                                                        |\n| high          | 16-25                       | Review and refactor. Recommended to add comments if the function is absolutely needed to be kept as it is. |\n| very-high     | 26-50                       | Refactor to reduce the complexity.                                                                         |\n| critical      | >50                         | Must refactor this. This can make the code untestable and very difficult to understand.                    |",
                "category": "ANTI_PATTERN",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit: Binding to all interfaces detected with hardcoded values",
                "tags": [
                  "a05",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B104",
                "shortDescription": "Binding to all network interfaces can potentially open up a service to traffic on unintended interfaces, that may not be properly documented or secured. This can be prevented by changing the code so it explicitly only allows access from localhost.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6cmx6b2xi",
                "description": "Binding to all network interfaces can potentially open up a service to traffic on unintended interfaces, that may not be properly documented or secured. This can be prevented by changing the code so it explicitly only allows access from localhost.\n\n<!--more-->\nWhen binding to `0.0.0.0`, you accept incoming connections from anywhere. During development, an application may have security vulnerabilities making it susceptible to SQL injections and other attacks. Therefore when the application is not ready for production, accepting connections from anywhere can be dangerous.\n\nIt is recommended to use `127.0.0.1` or local host during development phase. This prevents others from targeting your application and executing SQL injections against your project.\n### Bad practice\n```python\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('0.0.0.0, 31137)) # Binding to all interfaces\n```\n\n### Recommended\n```python\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('127.0.0.1', 31137)) # Binding to local host\n```\n```\n# References:\n- OWASP Top 10 2021 Category A05 - [Security Misconfiguration](https://owasp.org/Top10/A05_2021-Security_Misconfiguration/)",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Detected subprocess `popen` call with shell equals `True`",
                "tags": [
                  "cwe",
                  "a03",
                  "cwe-78",
                  "sans-top-25",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B602",
                "shortDescription": "Using `shell=True` can expose you to security risks if someone crafts input to issue different commands than the ones you intended.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6eHphZ256",
                "description": "Using `shell=True` can expose you to security risks if someone crafts input to issue different commands than the ones you intended.\n\n<!--more-->\nPython possesses many mechanisms to invoke an external executable. However, doing so may present a security issue if appropriate care is not taken to sanitize any user-provided or variable input. Subprocess invocation using a command shell is dangerous as it is vulnerable to various [shell injection attacks](https://owasp.org/www-community/attacks/Command_Injection). It is possible for an attacker to craft inputs to issue different commands than the ones you intended, for example: removing a file.\n\nGreat care should be taken to sanitize all input in order to mitigate this risk. Calls of this type are identified by a parameter of `shell=True` being given.\n\nIt is recommended to use functions that don't spawn a shell. If you must use them, use [`shlex.quote`](https://pypi.org/project/shellescape/) to sanitize the input.\n\n### Bad practice\n```python\nimport subprocess\n\nsubprocess.Popen(cmd, shell=True)  # Sensitive, shell spawned\n```\n\n### Recommended\n```python\nimport subprocess\n\nsubprocess.Popen(cmd)\n```\n\n## References:\n- [subprocess.popen](https://docs.python.org/3/library/subprocess.html#popen-constructor)\n- [Subprocess security considerations](https://docs.python.org/3/library/subprocess.html#security-considerations)\n- [shlex](https://docs.python.org/3/library/shlex.html)\n- [Command Injection](https://owasp.org/www-community/attacks/Command_Injection)\n- OWASP Top 10 2021 Category A03 - [Injection](https://owasp.org/Top10/A03_2021-Injection/)\n- [SANS Top 25](https://www.sans.org/top25-software-errors/)\n- [CWE-78](https://cwe.mitre.org/data/definitions/78.html)",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit: Starting a process with a partial executable path",
                "tags": [
                  "a03",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B607",
                "shortDescription": "Python possesses many mechanisms to invoke an external executable. If the desired executable path is not fully qualified relative to the filesystem root then this may present a potential security risk.",
                "severity": "MINOR",
                "isRecommended": false,
                "id": "SXNzdWU6a2JlbnF6",
                "description": "Python possesses many mechanisms to invoke an external executable. If the desired executable path is not fully qualified relative to the filesystem root then this may present a potential security risk.\n\n<!--more-->\nIn POSIX environments, the PATH environment variable is used to specify a set of standard locations that will be searched for the first matching named executable. While convenient, this behavior may allow a malicious actor to exert control over a system. If they are able to adjust the contents of the PATH variable, or manipulate the file system, then a bogus executable may be discovered in place of the desired one. This executable will be invoked with the user privileges of the Python process that spawned it, potentially a highly privileged user.\n\nThis test will scan the parameters of all configured Python methods, looking for paths that do not start at the filesystem root, that is, do not have a leading ‘/’ character.\n\n### Bad practice\n```python\nimport subprocess\n\nsubprocess.run(['calculator', '-u', 'critical', msg], check=True) # Sensitive, Path not qualified from root\n```\n\n### Recommended\n```python\nimport subprocess\n\nsubprocess.run(['/usr/bin/calculator', '-u', 'critical', msg], check=True) # Path qualified from root\n```\n\n## References:\n- [Bandit B607](https://bandit.readthedocs.io/en/latest/plugins/b607_start_process_with_partial_path.html#b607-start-process-with-partial-path)\n- OWASP Top 10 2021 Category A03 - [Injection](https://owasp.org/Top10/A03_2021-Injection/)",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Audit required: Use of `mark_safe` detected",
                "tags": [
                  "cwe",
                  "a03",
                  "cwe-79",
                  "sans-top-25",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B308",
                "shortDescription": "Use of `mark_safe()` may expose [cross-site scripting (XSS)](https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)) vulnerabilities and should be reviewed.\n`mark_safe` explicitly marks a string as safe for (HTML) output purposes.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6bGJydnhi",
                "description": "Use of `mark_safe()` may expose [cross-site scripting (XSS)](https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)) vulnerabilities and should be reviewed.\n`mark_safe` explicitly marks a string as safe for (HTML) output purposes.\n\n<!--more-->\nDjango auto-escapes all output from template variable tags unless explicitly told not to. Use of `mark_safe()` function implies that the parameter is safe for client-side output without Django's automatic string escaping. It's a legitimate way of defining strings that are intended to be interpreted as HTML.\n\nUsing `mark_safe()` on an internally generated string is okay but becomes a security risk if used on unchecked user input.\n\nSince this is an audit issue, some occurrences may be harmless here. The goal is to bring the issue to attention. Please make sure that the input string is trusted. If the occurrences don't seem to be valid, please feel free to ignore them.\n\nWhen possible, use [format_html](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html).\nIt is safe as all arguments are passed through [conditional_escape()](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.conditional_escape)\n\n### Bad practice\n```\nmark_safe(\"<b>%s</b> %s\" % (user_input))\n```\n\n### Recommended\n```python\nformat_html(\"<b>%s</b>, user_input)\n```\n## References:\n- [mark_safe](https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe)\n- OWASP Top 10 2021 Category A03 - [Injection](https://owasp.org/Top10/A03_2021-Injection/)\n- [CWE 79](https://cwe.mitre.org/data/definitions/79.html) - Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Use of an insecure method from `xml.dom.minidom` detected",
                "tags": [
                  "a03",
                  "a06",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B318",
                "shortDescription": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6bGJweG9i",
                "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          },
          {
            "node": {
              "issue": {
                "title": "Use of an insecure method from `xml.dom.pulldom` detected",
                "tags": [
                  "a03",
                  "a06",
                  "owasp-top-10"
                ],
                "shortcode": "BAN-B319",
                "shortDescription": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.",
                "severity": "MAJOR",
                "isRecommended": false,
                "id": "SXNzdWU6a2JlbXFi",
                "description": "Using various XML methods to parse untrusted XML data is known to be vulnerable to XML attacks. Using the [defusedxml](https://pypi.org/project/defusedxml) module is recommended. Methods should be replaced with their `defusedxml` equivalents.",
                "category": "SECURITY",
                "autofixAvailable": false
              }
            }
          }
        ]
      }
    }
  }
}