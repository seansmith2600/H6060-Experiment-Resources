#!/usr/bin/env python3

import os
import sys
import logging
import unittest
import json as JSON
from argparse import Namespace
from unittest.mock import patch
from main.python3 import manual_vulnerability_results_report


TEST_DIRECTORY_RESOURCES = os.path.dirname(os.path.realpath(__file__)) + "/resources/"

# OpenCVE responses
OPENCSV_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "opencve/opencve-empty-response.json"
OPENCSV_RESPONSE = TEST_DIRECTORY_RESOURCES + "opencve/opencve-response.json"

# NVD responses
NVD_RESPONSE_EMPTY = TEST_DIRECTORY_RESOURCES + "nvd/nvd-empty-response.json"
NVD_RESPONSE_NO_CVE = TEST_DIRECTORY_RESOURCES + "nvd/nvd-no-cwe-response.json"
NVD_RESPONSE_NO_WEAKNESS = TEST_DIRECTORY_RESOURCES + "nvd/nvd-no-weakness-response.json"
NVD_RESPONSE_MULTIPLE_CVE = TEST_DIRECTORY_RESOURCES + "nvd/nvd-multiple-cwe-response.json"
NVD_RESPONSE = TEST_DIRECTORY_RESOURCES + "nvd/nvd-response.json"

NVD_API_KEY = "11111111-2222-3333-4444-555555555555"
OPENCVE_USERNAME = "username"
OPENCVE_PASSWORD = "password"
SECURITY_TOOL_NAME = "security-tool"
SECURITY_TOOL_NAME = ""
SECURITY_TOOL_NAME_CSV_RESULT_FILENAME = "manual-vulnerability-result.csv"
SECURITY_TOOL_NAME_CSV_RESULT_PATH = f"../../main/python3/{SECURITY_TOOL_NAME_CSV_RESULT_FILENAME}"

# CWE IDs for mock testing
CWE_IDS = "CWE-798,CWE-120"

# CVE IDs for mock testing
CVE_IDS = "CVE-2020-15366,CVE-2019-5678"
CVE_NOT_FOUND = "CVE-2020-8203"
CVE_NO_CWE = "CVE-2018-18442"
CVE_NO_WEAKNESS = "CVE-2024-28219"
CVE_MULTIPLE_CWE = "CVE-2021-44228"
CVE_NO_DESCRIPTION = "CVE-2021-5555"


def mocked_response(*args, **kwargs):
    class MockResponse:
        def __init__(self, file, status_code):
            self.file = file
            try:
                with open(self.file, "r") as f:
                    self.text = f.read()
            except Exception:
                self.text = file

            self.status_code = status_code

        def status_code(self):
            return self.status_code

        def ok(self):
            return self.ok

        def json(self):
            return JSON.loads(self.text)

    if CWE_IDS.split(",")[0] in args[0]:
        return MockResponse(OPENCSV_RESPONSE, 200)
    elif CVE_IDS.split(",")[0] in args[0]:
        return MockResponse(NVD_RESPONSE, 200)
    elif CVE_NOT_FOUND in args[0]:
        return MockResponse(NVD_RESPONSE_EMPTY, 200)
    elif CVE_NO_CWE in args[0]:
        return MockResponse(NVD_RESPONSE_NO_CVE, 200)
    elif CVE_NO_WEAKNESS in args[0]:
        return MockResponse(NVD_RESPONSE_NO_WEAKNESS, 200)
    elif CVE_MULTIPLE_CWE in args[0]:
        return MockResponse(NVD_RESPONSE_MULTIPLE_CVE, 200)
    else:
        return None


class DevNull:
    def __init__(self):
        pass

    def write(self, s):
        pass


@patch("sys.stdout", new=DevNull())
@patch("sys.stderr", new=DevNull())
class TestManualVulnerabilityResultsReport(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestManualVulnerabilityResultsReport, self).__init__(*args, **kwargs)

    @classmethod
    def setUpClass(cls):
        manual_vulnerability_results_report.log = logging.getLogger()
        manual_vulnerability_results_report.log.setLevel(logging.INFO)
        with open(os.devnull, "w") as f:
            sys.stdout = f

    def __mock_args(
        self,
        nvd_api_key: str,
        opencve_username: str,
        opencve_password: str,
        security_tool_name: str,
        security_tool_csv_result_filename: str,
        cve_ids: str,
        cwe_ids: str,
    ) -> Namespace:
        """Mock arguments in argparse.Namespace type

        :parameter
            nvd_api_key:str -- NVD API Key to be mocked in the arguments
            opencve_username:str -- OpenCVE username to be mocked in the arguments
            opencve_password:str -- OpenCVE password to be mocked in the arguments
            security_tool_name:str -- Security tool name to be mocked in the arguments
            security_tool_csv_result_filename:str -- Security tool CSV result filename to be mocked in the arguments
            cve_ids:str -- CVE IDs to be mocked in the arguments
            cwe_ids:str -- CWE IDs to be mocked in the arguments

        :return
            argparse.Namespace -- Mocked arguments
        """
        return Namespace(
            nvd_api_key=nvd_api_key,
            opencve_username=opencve_username,
            opencve_password=opencve_password,
            security_tool_name=security_tool_name,
            security_tool_csv_result_filename=security_tool_csv_result_filename,
            cve_ids=cve_ids,
            cwe_ids=cwe_ids,
        )

    def test_write_csv_report_header_invalid_tool_type(self):
        with self.assertRaises(SystemExit) as cm:
            manual_vulnerability_results_report.write_csv_report_header("invalid", SECURITY_TOOL_NAME_CSV_RESULT_PATH)
        self.assertEqual(cm.exception.code, 1)

    def test_get_json_value_missing_value(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = manual_vulnerability_results_report.get_json_value(data, "missing")
        self.assertEqual(result, "N/A")

    def test_get_json_value_two_key_missing_key_one(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = manual_vulnerability_results_report.get_json_value(data, "missing", "two")
        self.assertEqual(result, "N/A")

    def test_get_json_value_two_key_missing_key_two(self):
        data = '{"one":{ "two": "value" }}'
        data = JSON.loads(data)
        result = manual_vulnerability_results_report.get_json_value(data, "one", "missing")
        self.assertEqual(result, "N/A")

    def test_get_json_value_two_key_no_value(self):
        data = '{"one":{ "two": "" }}'
        data = JSON.loads(data)
        result = manual_vulnerability_results_report.get_json_value(data, "one", "two")
        self.assertEqual(result, "N/A")

    # CVE testing
    @patch(
        "main.python3.manual_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_cve_not_found(self, mock_response):
        args = manual_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--security-tool-name",
                SECURITY_TOOL_NAME,
                "--security-tool-csv-result-filename",
                SECURITY_TOOL_NAME_CSV_RESULT_FILENAME,
                "--cve-ids",
                CVE_NOT_FOUND,
            ]
        )
        result = manual_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.manual_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_cve_no_cwe(self, mock_response):
        args = manual_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--security-tool-name",
                SECURITY_TOOL_NAME,
                "--security-tool-csv-result-filename",
                SECURITY_TOOL_NAME_CSV_RESULT_FILENAME,
                "--cve-ids",
                CVE_NO_CWE,
            ]
        )
        result = manual_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.manual_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_cve_no_weakness(self, mock_response):
        args = manual_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--security-tool-name",
                SECURITY_TOOL_NAME,
                "--security-tool-csv-result-filename",
                SECURITY_TOOL_NAME_CSV_RESULT_FILENAME,
                "--cve-ids",
                CVE_NO_WEAKNESS,
            ]
        )
        result = manual_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.manual_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_cve_multiple_cwe(self, mock_response):
        args = manual_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--security-tool-name",
                SECURITY_TOOL_NAME,
                "--security-tool-csv-result-filename",
                SECURITY_TOOL_NAME_CSV_RESULT_FILENAME,
                "--cve-ids",
                CVE_MULTIPLE_CWE,
            ]
        )
        result = manual_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @patch(
        "main.python3.manual_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_cve_ids(self, mock_response):
        args = manual_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--security-tool-name",
                SECURITY_TOOL_NAME,
                "--security-tool-csv-result-filename",
                SECURITY_TOOL_NAME_CSV_RESULT_FILENAME,
                "--cve-ids",
                CVE_IDS,
            ]
        )
        result = manual_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    # CWE testing
    @patch(
        "main.python3.manual_vulnerability_results_report.send_get_request",
        side_effect=mocked_response,
    )
    def test_main_cwe_ids(self, mock_response):
        args = manual_vulnerability_results_report.get_args(
            [
                "--nvd-api-key",
                NVD_API_KEY,
                "--opencve-username",
                OPENCVE_USERNAME,
                "--opencve-password",
                OPENCVE_PASSWORD,
                "--security-tool-name",
                SECURITY_TOOL_NAME,
                "--security-tool-csv-result-filename",
                SECURITY_TOOL_NAME_CSV_RESULT_FILENAME,
                "--cwe-ids",
                CWE_IDS,
            ]
        )
        result = manual_vulnerability_results_report.main(args)
        self.assertEqual(result, None)

    @classmethod
    def tearDownClass(cls):
        sys.stdout = sys.__stdout__
        if os.path.isfile(SECURITY_TOOL_NAME_CSV_RESULT_PATH):
            os.remove(SECURITY_TOOL_NAME_CSV_RESULT_PATH)


if __name__ == "__main__":
    unittest.main()
