#!/usr/bin/env python3

import re
import os
import sys
import csv
import time
import logging
import argparse
import requests
import itertools
from requests.auth import HTTPBasicAuth
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry


default_not_found_value = "N/A"


class LogFilter:  # pragma: no cover
    def __init__(self, level):
        self.__level = level

    def filter(self, log_record):
        return log_record.levelno <= self.__level


def get_args(args: argparse.Namespace) -> argparse.Namespace:
    """Parse and return the arguments of the application

    :parameter
        args:argparse.Namespace -- Submitted arguments to parse

    :return
        argparse.Namespace -- Parsed arguments
    """
    parser = argparse.ArgumentParser(description="Generate Vulnerability Results Report.")
    parser.add_argument(
        "--nvd-api-key",
        action="store",
        required=True,
        help="NIST NVD API key",
    )
    parser.add_argument(
        "--opencve-username",
        action="store",
        required=True,
        help="OpenCVE registered username",
    )
    parser.add_argument(
        "--opencve-password",
        action="store",
        required=True,
        help="OpenCVE registered password",
    )
    parser.add_argument(
        "--security-tool-name",
        action="store",
        required=True,
        help="Name of the security tool",
    )
    parser.add_argument(
        "--security-tool-csv-result-filename",
        action="store",
        required=True,
        help="Name of the security tool CSV result filename",
    )
    parser.add_argument(
        "--cve-ids",
        nargs="?",
        const="",
        required=False,
        help="Comma-separated list of CVE IDs",
    )
    parser.add_argument(
        "--cwe-ids",
        nargs="?",
        const="",
        required=False,
        help="Comma-separated list of CWE IDs",
    )
    return parser.parse_args(args)


def send_get_request(url: str, api_key: str, username: str = None, password: str = None, sleep: int = 5) -> requests:  # pragma: no cover
    """Send GET request to URL

    :parameter
        url:str -- URL to make GET request
        api_key:str -- API key for authentication
        username:str -- Username for authentication
        password:str -- Password for authentication

    :return
        requests.models.Response -- Response from GET request
    """
    session = requests.Session()
    retries = Retry(
        total=3,
        backoff_factor=3,
        status_forcelist=[404, 408, 500, 502, 503, 504],
    )
    session.mount("https://", HTTPAdapter(max_retries=retries))
    if api_key:
        request = session.get(url, headers={"Accept": "application/json", "apiKey": api_key})
    else:
        request = session.get(url, headers={"Accept": "application/json"}, auth=HTTPBasicAuth(username, password))

    if request.ok:
        log.info(f"GET request successful: {url}")

        if sleep:
            log.info(f"Sleeping for {sleep} seconds before making next request")
            time.sleep(sleep)

        return request
    log.error(f"GET request failed: \n{request.text.encode('utf8')}")
    return None


def get_directory_path() -> str:
    """Get directory path of script

    :return
        str -- Directory path of script
    """
    return os.path.dirname(os.path.realpath(__file__))


def convert_list_to_csv_row(data: list) -> str:
    """Convert list to CSV row

    :parameter
        data:list -- Data to convert to CSV row

    :return
        str -- CSV row
    """
    return ",".join(map(str, data))


def get_mitre_top_25_cwe() -> list:
    """Top 25 CWE of 2024

    :return
        list -- Top 25 CWE IDs
    """
    return [
        "CWE-787",
        "CWE-79",
        "CWE-89",
        "CWE-416",
        "CWE-78",
        "CWE-20",
        "CWE-125",
        "CWE-22",
        "CWE-352",
        "CWE-434",
        "CWE-862",
        "CWE-476",
        "CWE-287",
        "CWE-190",
        "CWE-502",
        "CWE-77",
        "CWE-119",
        "CWE-798",
        "CWE-918",
        "CWE-306",
        "CWE-362",
        "CWE-269",
        "CWE-94",
        "CWE-863",
        "CWE-276",
    ]


def get_owasp_top_10_cwe() -> set:
    """Top 10 OWASP CWE of 2024

    :return
        list -- CWE IDs corresponding to the OWASP security category
    """
    return {
        "A01 Broken Access Control": [
            "CWE-22",
            "CWE-23",
            "CWE-35",
            "CWE-59",
            "CWE-200",
            "CWE-201",
            "CWE-219",
            "CWE-264",
            "CWE-275",
            "CWE-276",
            "CWE-284",
            "CWE-285",
            "CWE-352",
            "CWE-359",
            "CWE-377",
            "CWE-402",
            "CWE-425",
            "CWE-441",
            "CWE-497",
            "CWE-538",
            "CWE-540",
            "CWE-548",
            "CWE-552",
            "CWE-566",
            "CWE-601",
            "CWE-639",
            "CWE-651",
            "CWE-668",
            "CWE-706",
            "CWE-862",
            "CWE-863",
            "CWE-913",
            "CWE-922",
            "CWE-1275",
        ],
        "A02 Cryptographic Failures": [
            "CWE-261",
            "CWE-296",
            "CWE-310",
            "CWE-319",
            "CWE-321",
            "CWE-322",
            "CWE-323",
            "CWE-324",
            "CWE-325",
            "CWE-326",
            "CWE-327",
            "CWE-328",
            "CWE-329",
            "CWE-330",
            "CWE-331",
            "CWE-335",
            "CWE-336",
            "CWE-337",
            "CWE-338",
            "CWE-339",
            "CWE-340",
            "CWE-347",
            "CWE-523",
            "CWE-720",
            "CWE-757",
            "CWE-759",
            "CWE-760",
            "CWE-780",
            "CWE-818",
            "CWE-916",
        ],
        "A03 Injection": [
            "CWE-20",
            "CWE-74",
            "CWE-75",
            "CWE-77",
            "CWE-78",
            "CWE-79",
            "CWE-80",
            "CWE-83",
            "CWE-87",
            "CWE-88",
            "CWE-89",
            "CWE-90",
            "CWE-91",
            "CWE-93",
            "CWE-94",
            "CWE-95",
            "CWE-96",
            "CWE-97",
            "CWE-98",
            "CWE-99",
            "CWE-100",
            "CWE-113",
            "CWE-116",
            "CWE-138",
            "CWE-184",
            "CWE-470",
            "CWE-471",
            "CWE-564",
            "CWE-610",
            "CWE-643",
            "CWE-644",
            "CWE-652",
            "CWE-917",
        ],
        "A04 Insecure Design": [
            "CWE-73",
            "CWE-183",
            "CWE-209",
            "CWE-213",
            "CWE-235",
            "CWE-256",
            "CWE-257",
            "CWE-266",
            "CWE-269",
            "CWE-280",
            "CWE-311",
            "CWE-312",
            "CWE-313",
            "CWE-316",
            "CWE-419",
            "CWE-430",
            "CWE-434",
            "CWE-444",
            "CWE-451",
            "CWE-472",
            "CWE-501",
            "CWE-522",
            "CWE-525",
            "CWE-539",
            "CWE-579",
            "CWE-598",
            "CWE-602",
            "CWE-642",
            "CWE-646",
            "CWE-650",
            "CWE-653",
            "CWE-656",
            "CWE-657",
            "CWE-799",
            "CWE-807",
            "CWE-840",
            "CWE-841",
            "CWE-927",
            "CWE-1021",
            "CWE-1173",
        ],
        "A05 Security Misconfiguration": [
            "CWE-2",
            "CWE-11",
            "CWE-13",
            "CWE-15",
            "CWE-16",
            "CWE-260",
            "CWE-315",
            "CWE-266",
            "CWE-520",
            "CWE-526",
            "CWE-537",
            "CWE-541",
            "CWE-547",
            "CWE-611",
            "CWE-614",
            "CWE-756",
            "CWE-776",
            "CWE-942",
            "CWE-1004",
            "CWE-1032",
            "CWE-1174",
        ],
        "A06 Vulnerable And Outdated Components": [
            "Drupal",
            "WordPress",
            "Joomla",
        ],
        "A07 Identification and Authentication Failures": [
            "CWE-255",
            "CWE-259",
            "CWE-287",
            "CWE-288",
            "CWE-290",
            "CWE-294",
            "CWE-295",
            "CWE-297",
            "CWE-300",
            "CWE-302",
            "CWE-304",
            "CWE-306",
            "CWE-307",
            "CWE-346",
            "CWE-384",
            "CWE-521",
            "CWE-613",
            "CWE-620",
            "CWE-640",
            "CWE-798",
            "CWE-940",
            "CWE-1216",
        ],
        "A08 Software and Data Integrity Failures": [
            "CWE-345",
            "CWE-353",
            "CWE-426",
            "CWE-494",
            "CWE-502",
            "CWE-565",
            "CWE-784",
            "CWE-829",
            "CWE-830",
            "CWE-913",
        ],
        "A09 Security Logging and Monitoring Failures": [
            "CWE-117",
            "CWE-223",
            "CWE-532",
            "CWE-778",
        ],
        "A10 Server Side Request Forgery (SSRF)": ["CWE-918"],
    }


def search_owasp_top_10(cwe_id: str) -> str:
    """Search OWASP Top 10 for CWE ID

    :parameter
        cwe_id:str -- CWE ID to check if in OWASP top 10

    :return
        str -- OWASP category associated with CWE ID
    """
    for key, value in get_owasp_top_10_cwe().items():
        if cwe_id in value:
            log.info(f"{cwe_id} found in OWASP Top 10: {key}")
            return key
    log.info(f"{cwe_id} not found in OWASP Top 10")
    return default_not_found_value


def search_mitre_top_25(cwe_id: str) -> str:
    """Search MITRE Top 25 for CWE ID

    :parameter
        cwe_id:str -- CWE ID to check if in MITRE top 25

    :return
        str -- MITRE ranking for CWE ID
    """
    if cwe_id in get_mitre_top_25_cwe():
        cwe_index = str(get_mitre_top_25_cwe().index(cwe_id) + 1)
        log.info(f"{cwe_id} found in MITRE Top 25 at index {cwe_index}")
        return cwe_index
    log.info(f"{cwe_id} not found in MITRE Top 25")
    return default_not_found_value


def get_csv_sca_column_headers() -> str:
    """Get column headers for SCA CSV report

    :return
        list -- Column headers for SCA CSV report
    """
    csv_headers = [
        "Tool Type",
        "Tool Name",
        "Tool Version",
        "Tool Classification",
        "Language",
        "Severity",
        "Confidence",
        "Component Type",
        "Component Name",
        "Component Version",
        "Component PURL",
        "Component License",
        "Component Location",
        "CVE ID",
        "CVE Description",
        "CVE Source",
        "CVE Published Date",
        "CVE Last Modified Date",
        "CVE Status",
        "CVE Malicious",
        "CVE Disputed",
        "CVSS V2 Vector",
        "CVSS V3 Vector",
        "CVSS V4 Vector",
        "CWE ID",
    ]
    return f"{convert_list_to_csv_row(csv_headers)}\n"


def get_csv_sast_column_headers() -> str:
    """Get column headers for SAST CSV report

    :return
        list -- Column headers for SAST CSV report
    """
    csv_headers = [
        "Tool Type",
        "Tool Name",
        "Tool Version",
        "Tool Classification",
        "Language",
        "Severity",
        "Confidence",
        "CWE ID",
        "CWE Name",
        "CWE Description",
        "CWE Impact",
        "CWE Likelihood",
        "OWASP Top 10",
        "Mitre Top 25",
        "Rule ID",
        "File",
        "Line",
    ]
    return f"{convert_list_to_csv_row(csv_headers)}\n"


def write_csv_report_header(tool_type: str, csv_output_filename: str) -> None:
    """Write CSV report header

    :parameter
        tool_type:str -- Type of tool to write header for (sca or sast)
        csv_output_filename:str -- Name of CSV report to write
    """
    log.info(f"Writing CSV report header to {get_directory_path()}/{csv_output_filename}")

    with open(f"{get_directory_path()}/{csv_output_filename}", "w") as file:
        if tool_type.upper() == "SAST":
            file.write(get_csv_sast_column_headers())
        elif tool_type.upper() == "SCA":
            file.write(get_csv_sca_column_headers())
        else:
            log.error(f"Tool type {tool_type} not supported")
            sys.exit(1)

    log.info(f"Successfully wrote CSV report header to {get_directory_path()}/{csv_output_filename}")


# OpenCVE API is rate limited
def get_opencve_api_url(cwe_id: str) -> str:
    """Get OpenCVE API URL for CWE ID

    :parameter
        cwe_id:str -- CWE ID to search in OpenCVE

    :return
        str -- OpenCVE API URL for CWE ID
    """
    return f"https://www.opencve.io/api/cwe/{cwe_id}"


# OpenCVE extracts CVE details from NVD but NVD API is not rate limited
def get_nvd_api_url(cve_id: str) -> str:
    """Get NVD API URL for CVE ID

    :parameter
        cwe_id:str -- CVE ID to search in NVD

    :return
        str -- NVD API URL for CVE ID
    """
    return f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={cve_id}"


def get_json_value(
    json_data: dict,
    data_key_1: str,
    data_key_2: str = None,
    default_value: str = default_not_found_value,
) -> str:
    """Get JSON value if exists

    :parameter
        json_data:dict -- JSON response data
        data_key_1:str -- Primary key of JSON response data
        data_key_2:str -- Optional second key of JSON response data
        default_value:str -- Default value if key not found

    :return
        str -- JSON value
    """
    if data_key_2 is not None:
        if data_key_1 in json_data:
            if data_key_2 in json_data[data_key_1]:
                # Check if value is not empty
                if json_data[data_key_1][data_key_2]:
                    return json_data[data_key_1][data_key_2]
    elif data_key_1 in json_data:
        # Check if value is not empty
        if json_data[data_key_1]:
            return json_data[data_key_1]
    return default_value


def get_nvd_cvss_vector(nvd_data: dict, cvss_version: str) -> str:
    """Get NVD CVSS vector

    :parameter
        nvd_data:dict -- NVD response data
        cvss_version:str -- CVSS version

    :return
        str -- NVD CVSS vector
    """
    if "cvssMetricV4" in nvd_data and cvss_version == "4.0":
        cvss_details = get_json_value(nvd_data, "cvssMetricV4")
        return get_json_value(cvss_details[0], "cvssData", "vectorString")
    elif "cvssMetricV31" in nvd_data and cvss_version == "3.1":
        cvss_details = get_json_value(nvd_data, "cvssMetricV31")
        return get_json_value(cvss_details[0], "cvssData", "vectorString")
    elif "cvssMetricV3" in nvd_data and cvss_version == "3.0":
        cvss_details = get_json_value(nvd_data, "cvssMetricV3")
        return get_json_value(cvss_details[0], "cvssData", "vectorString")
    elif "cvssMetricV2" in nvd_data and cvss_version == "2.0":
        cvss_details = get_json_value(nvd_data, "cvssMetricV2")
        return get_json_value(cvss_details[0], "cvssData", "vectorString")
    return default_not_found_value


def get_cwe_regex() -> str:
    """Get regex pattern for CWE ID

    :return
        str -- CWE ID regex pattern
    """
    return r"CWE-(\d{1,9})"


def get_cwe_from_nvd(nvd_data: dict) -> str:
    """Get CWE ID from NVD data

    :parameter
        nvd_data:dict -- NVD data to extract CWE ID from

    :return
        str -- CWE ID extracted from NVD data
    """
    nvd_weaknesses = get_json_value(nvd_data, "weaknesses")
    if nvd_weaknesses is default_not_found_value:
        return nvd_weaknesses
    cwe_list = []
    for weakness in nvd_weaknesses:
        for description in weakness["description"]:
            # Only consider vulnerabilities with CWE ID
            match = re.search(get_cwe_regex(), description["value"])
            if match:
                vulnerability_cwe_id = match.group(0)
                log.info(f"Extracted CWE ID from NVD: {vulnerability_cwe_id}")
                cwe_list.append(vulnerability_cwe_id)
    return ",".join(cwe_list)


def write_to_csv_report(csv_data: list, csv_output_filename: str) -> None:
    """Write parsed vulnerability data to CSV report

    :parameter
        csv_data:list -- Data to write to CSV report
        csv_output_filename:str -- Name of CSV report to write
    """
    log.info(f"Writing parsed vulnerability data to {get_directory_path()}/{csv_output_filename}")

    csv_data.sort()
    csv_data = list(item for item, _ in itertools.groupby(csv_data))

    with open(f"{get_directory_path()}/{csv_output_filename}", "a") as csv_file:
        writer = csv.writer(csv_file)
        writer.writerows(csv_data)

    log.info(f"Successfully wrote SBOM and OSV data to {get_directory_path()}/{csv_output_filename}")


def parse_cve_ids(nvd_api_key: str, cve_ids: str, tool_name: str, csv_output_filename: str) -> None:
    """Parse CVE IDs

    :parameter
        nvd_api_key:str -- NVD API Key
        cve_ids:str -- Comma-separated list of CVE IDs
        tool_name:str -- Name of security tool
        csv_output_filename:str -- Name of CSV report to write
    """
    csv_rows = []
    cve_list = cve_ids.split(",")
    tool_type = "SCA"
    try:
        for vulnerability_cve_id in cve_list:
            log.info(f"Getting CVE details from NVD: {vulnerability_cve_id}")

            # Get CVE details from NVD
            nvd_response = send_get_request(get_nvd_api_url(vulnerability_cve_id), nvd_api_key)
            if nvd_response:
                nvd_details = nvd_response.json()
                if nvd_details["totalResults"] > 0:
                    # Set default values
                    vulnerability_cve_description = default_not_found_value

                    # Get CVE details
                    nvd_cve_details = nvd_details["vulnerabilities"][0]["cve"]
                    nvd_cve_descriptions = get_json_value(nvd_cve_details, "descriptions")
                    for description in nvd_cve_descriptions:
                        if get_json_value(description, "lang").upper() == "EN":
                            vulnerability_cve_description = get_json_value(description, "value")
                            break
                    vulnerability_cve_source = get_json_value(nvd_cve_details, "sourceIdentifier")
                    vulnerability_cve_published_date = get_json_value(nvd_cve_details, "published")
                    vulnerability_cve_last_modified_date = get_json_value(nvd_cve_details, "lastModified")
                    vulnerability_cve_status = get_json_value(nvd_cve_details, "vulnStatus")

                    # Get CVSS vectors
                    vulnerability_cve_metrics = get_json_value(nvd_cve_details, "metrics")
                    vulnerability_cve_cvss_v2_vector = get_nvd_cvss_vector(vulnerability_cve_metrics, "2.0")
                    vulnerability_cve_cvss_v3_vector = get_nvd_cvss_vector(vulnerability_cve_metrics, "3.1")
                    if vulnerability_cve_cvss_v3_vector == default_not_found_value:
                        vulnerability_cve_cvss_v3_vector = get_nvd_cvss_vector(vulnerability_cve_metrics, "3.0")
                    vulnerability_cve_cvss_v4_vector = get_nvd_cvss_vector(vulnerability_cve_metrics, "4.0")

                    # Get CWE ID
                    vulnerability_cwe_id = get_cwe_from_nvd(nvd_cve_details)

                    vulnerability_results_data = [
                        tool_type,
                        tool_name,
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        vulnerability_cve_id,
                        vulnerability_cve_description,
                        vulnerability_cve_source,
                        vulnerability_cve_published_date,
                        vulnerability_cve_last_modified_date,
                        vulnerability_cve_status,
                        "",
                        "",
                        vulnerability_cve_cvss_v2_vector,
                        vulnerability_cve_cvss_v3_vector,
                        vulnerability_cve_cvss_v4_vector,
                        vulnerability_cwe_id,
                    ]
                    log.info(f"Extracted vulnerability details from NVD: {vulnerability_cve_id}")

                    # Add vulnerability data to CSV row
                    csv_rows.append(vulnerability_results_data)
                else:
                    log.info(f"No CVE details found in NVD: {vulnerability_cve_id}")
            else:
                log.error(f"Failed to extract vulnerability details from NVD: {vulnerability_cve_id}")

        log.info(f"{str(len(csv_rows))} CSV rows generated")
        write_to_csv_report(csv_rows, csv_output_filename)
    except Exception as e:  # pragma: no cover
        log.error(f"Failed to parse CVE IDs: {e}")
        sys.exit(1)
    else:
        log.info(f"Successfully parsed CVE IDs: {cve_ids}")
    return None


def parse_cwe_ids(opencve_username: str, opencve_password: str, cwe_ids: str, tool_name: str, csv_output_filename: str) -> None:
    """Parse CWE IDs

    :parameter
        opencve_username:str -- OpenCVE username
        opencve_password:str -- OpenCVE password
        cwe_ids:str -- Comma-separated list of CWE IDs
        tool_name:str -- Name of security tool
        csv_output_filename:str -- Name of CSV report to write
    """
    csv_rows = []
    cwe_list = cwe_ids.split(",")
    tool_type = "SAST"
    try:
        for vulnerability_cwe_id in cwe_list:
            vulnerability_owasp_top_10 = search_owasp_top_10(vulnerability_cwe_id)
            vulnerability_mitre_top_25 = search_mitre_top_25(vulnerability_cwe_id)

            # Set default values
            vulnerability_cwe_name = default_not_found_value
            vulnerability_cwe_description = default_not_found_value

            log.info(f"Getting vulnerability details from OpenCVE: {vulnerability_cwe_id}")

            # Get CWE details from OpenCVE
            opencve_cwe_details = send_get_request(get_opencve_api_url(vulnerability_cwe_id), None, opencve_username, opencve_password)
            if opencve_cwe_details:
                opencve_details = opencve_cwe_details.json()
                vulnerability_cwe_name = get_json_value(opencve_details, "name")
                vulnerability_cwe_description = get_json_value(opencve_details, "description")
                log.info(f"Extracted vulnerability details from OpenCVE: {vulnerability_cwe_id}")
            else:
                log.error(f"Failed to extract vulnerability details from OpenCVE: {vulnerability_cwe_id}")

            vulnerability_results_data = [
                tool_type,
                tool_name,
                "",
                "",
                "",
                "",
                "",
                vulnerability_cwe_id,
                vulnerability_cwe_name,
                vulnerability_cwe_description,
                "",
                "",
                vulnerability_owasp_top_10,
                vulnerability_mitre_top_25,
                "",
                "",
                "",
            ]
            log.info(f"Fetched vulnerability details: {vulnerability_cwe_id}")

            # Add vulnerability data to CSV row
            csv_rows.append(vulnerability_results_data)

        log.info(f"{str(len(csv_rows))} CSV rows generated")
        write_to_csv_report(csv_rows, csv_output_filename)
    except Exception as e:  # pragma: no cover
        log.error(f"Failed to parse CWE IDs: {e}")
        sys.exit(1)
    else:
        log.info(f"Successfully parsed CWE IDs: {cwe_ids}")
    return None


def main(args: argparse.Namespace) -> None:
    """Main function of script

    :parameter
        args:argparse.Namespace -- Parsed arguments supplied to script
    """
    log.info(f"Generating vulnerability results report for {args.security_tool_name}")

    # SCA report
    if args.cve_ids:
        log.info(f"Filtering vulnerabilities by CVE IDs: {args.cve_ids}")
        write_csv_report_header("sca", args.security_tool_csv_result_filename)
        parse_cve_ids(args.nvd_api_key, args.cve_ids, args.security_tool_name, args.security_tool_csv_result_filename)

    # SAST report
    if args.cwe_ids:
        log.info(f"Filtering vulnerabilities by CWE IDs: {args.cwe_ids}")
        write_csv_report_header("sast", args.security_tool_csv_result_filename)
        parse_cwe_ids(
            args.opencve_username, args.opencve_password, args.cwe_ids, args.security_tool_name, args.security_tool_csv_result_filename
        )


if __name__ == "__main__":
    """
    The starting point of the application
    Script should be running in the root dir of project
    """
    log = logging.getLogger()
    log.setLevel(logging.NOTSET)

    logging_handler_out = logging.StreamHandler(sys.stdout)
    logging_handler_out.setLevel(logging.INFO)
    logging_handler_out.addFilter(LogFilter(logging.INFO))
    log.addHandler(logging_handler_out)

    logging_handler_err = logging.StreamHandler(sys.stderr)
    logging_handler_err.setLevel(logging.ERROR)
    logging_handler_err.addFilter(LogFilter(logging.ERROR))
    log.addHandler(logging_handler_err)

    main(get_args(sys.argv[1:]))
