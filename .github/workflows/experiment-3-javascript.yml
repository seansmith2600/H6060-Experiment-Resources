name: Experiment 3 - JavaScript

on:
  workflow_call:
    secrets:
      # API secrets
      github-token:
        description: Token used to authenticate with GitHub
        required: true

      github-api-token:
        description: Token used to authenticate with GitHub API
        required: true

      nvd-api-key:
        description: API key used to authenticate with NVD
        required: true

      opencve-username:
        description: Username used to authenticate with OpenCVE
        required: true

      opencve-password:
        description: Password used to authenticate with OpenCVE
        required: true

      honeycomb-api-key:
        description: API key used to authenticate with Honeycomb
        required: true

      # DeepSource secrets
      deepsource-api-key:
        description: API key used to authenticate with DeepSource
        required: false

      # OWASP Dependency Check secrets
      oss-index-username:
        description: Username used to authenticate with OSS Index
        required: false

      oss-index-password:
        description: Password used to authenticate with OSS Index
        required: false

      # Semgrep secrets
      semgrep-app-token:
        description: Token used to authenticate with Semgrep
        required: false

      # Snyk secrets
      snyk-token:
        description: Token used to authenticate with Snyk
        required: false

      # SonarQube secrets
      sonarqube-username:
        description: Username used to authenticate with SonarQube
        required: false

      sonarqube-password:
        description: Password used to authenticate with SonarQube
        required: false

      sonarqube-token-ubuntu:
        description: Token used to authenticate with SonarQube on Ubuntu
        required: false

      sonarqube-token-macos:
        description: Token used to authenticate with SonarQube on macOS
        required: false

      sonarqube-token-windows:
        description: Token used to authenticate with SonarQube on Windows
        required: false

      sonarqube-user-token-ubuntu:
        description: User token used to authenticate with SonarQube on Ubuntu
        required: false

      sonarqube-user-token-macos:
        description: User token used to authenticate with SonarQube on macOS
        required: false

      sonarqube-user-token-windows:
        description: User token used to authenticate with SonarQube on Windows
        required: false

      sonarqube-url-ubuntu:
        description: URL used to authenticate with SonarQube on Ubuntu
        required: false

      sonarqube-url-macos:
        description: URL used to authenticate with SonarQube on macOS
        required: false

      sonarqube-url-windows:
        description: URL used to authenticate with SonarQube on Windows
        required: false

    inputs:
      # Enabling inputs
      sast-codeql-enabled:
        description: Enable CodeQL scan (SAST)
        type: boolean
        required: false
        default: true

      sast-horusec-enabled:
        description: Enable Horusec scan (SAST)
        type: boolean
        required: false
        default: true

      sast-semgrep-enabled:
        description: Enable Semgrep scan (SAST)
        type: boolean
        required: false
        default: true

      sast-sonarqube-enabled:
        description: Enable SonarQube scan (SAST)
        type: boolean
        required: false
        default: true

      sast-snyk-code-enabled:
        description: Enable Snyk Code scan (SAST)
        type: boolean
        required: false
        default: true

      sca-grype-enabled:
        description: Enable Grype scan (SCA)
        type: boolean
        required: false
        default: true

      sca-owasp-dependency-check-enabled:
        description: Enable OWASP Dependency Check scan (SCA)
        type: boolean
        required: false
        default: true

      sca-snyk-enabled:
        description: Enable Snyk scan (SCA)
        type: boolean
        required: false
        default: true

      reporting-enabled:
        description: Enable reporting jobs
        type: boolean
        required: false
        default: true

      # Horusec inputs
      horusec-files-or-paths-to-ignore:
        description: Paths to ignore during the Horusec scan
        type: string
        required: false
        default: "**/test/**"

      # Semgrep inputs
      semgrep-files-or-paths-to-ignore:
        description: Paths to ignore during the Semgrep scan
        type: string
        required: false
        default: "test,tests"

      # SonarQube inputs
      sonarqube-sources:
        description: Source directories to scan
        type: string
        required: false
        default: src

      # Extra inputs
      node-version:
        description: Node version to use
        type: string
        required: false
        default: 16.x

      project-name:
        description: Name of project to be scanned
        type: string
        required: false

      build-artifact:
        description: Name of build artifact
        type: string
        required: false

      build-directory:
        description: Name of project build directory
        type: string
        required: false

env:
  CHECKOUT_CURRENT_REPO_NAME: seansmith2600/H6060-Experiment-Resources
  CHECKOUT_CURRENT_REPO_PATH: experiment-resources-repository
  CHECKOUT_PROJECT_REPO_PATH: upstream-repository
  PROJECT_PROGRAMMING_LANGUAGE: javascript

permissions:
  security-events: write

defaults:
  run:
    shell: bash

jobs:
  sast-codeql:
    name: (SAST) CodeQL
    if: ${{ inputs.sast-codeql-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Run CodeQL - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sast/codeql
        with:
          programming-language: ${{ env.PROJECT_PROGRAMMING_LANGUAGE }}
          artifact-name: sast-codeql-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sast-horusec:
    name: (SAST) Horusec
    if: ${{ inputs.sast-horusec-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Run Horusec - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sast/horusec
        with:
          files-or-paths-to-ignore: ${{ inputs.horusec-files-or-paths-to-ignore }}
          artifact-name: sast-horusec-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sast-semgrep:
    name: (SAST) Semgrep
    if: ${{ inputs.sast-semgrep-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.semgrep-app-token }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Run Semgrep - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sast/semgrep
        with:
          programming-language: ${{ env.PROJECT_PROGRAMMING_LANGUAGE }}
          files-or-paths-to-ignore: ${{ inputs.semgrep-files-or-paths-to-ignore }}
          artifact-name: sast-semgrep-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sast-snyk-code:
    name: (SAST) Snyk Code
    if: ${{ inputs.sast-snyk-code-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    env:
      SNYK_TOKEN: ${{ secrets.snyk-token }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Run Snyk Code - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sast/snyk-code
        with:
          artifact-name: sast-snyk-code-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sast-sonarqube:
    name: (SAST) SonarQube
    if: ${{ inputs.sast-sonarqube-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Download Project Build
        uses: dawidd6/action-download-artifact@v6
        with:
          name: "${{ inputs.build-artifact }}-${{ matrix.os }}"
          path: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          github_token: ${{ secrets.github-token }}
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: ""
          commit: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check For File Existence
        if: ${{ inputs.build-directory != '' }}
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          fail: true

      - name: Set SonarQube Environment Variables
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-14' }}
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
              echo "SONARQUBE_TOKEN=${{ secrets.sonarqube-token-ubuntu }}" >> $GITHUB_ENV
              echo "SONARQUBE_URL=${{ secrets.sonarqube-url-ubuntu }}" >> $GITHUB_ENV
          else
              echo "SONARQUBE_TOKEN=${{ secrets.sonarqube-token-macos }}" >> $GITHUB_ENV
              echo "SONARQUBE_URL=${{ secrets.sonarqube-url-macos }}" >> $GITHUB_ENV
          fi

      - name: Set SonarQube Environment Variables (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          echo "SONARQUBE_TOKEN=${{ secrets.sonarqube-token-windows }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "SONARQUBE_URL=${{ secrets.sonarqube-url-windows }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Run SonarQube - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sast/sonarqube
        with:
          programming-language: ${{ env.PROJECT_PROGRAMMING_LANGUAGE }}
          sonarqube-token: ${{ env.SONARQUBE_TOKEN }}
          sonarqube-url: ${{ env.SONARQUBE_URL }}
          sonarqube-username: ${{ secrets.sonarqube-username }}
          sonarqube-password: ${{ secrets.sonarqube-password }}
          sonarqube-project-key: ${{ inputs.project-name }}
          sonarqube-sources: ${{ inputs.sonarqube-sources }}
          artifact-name: sast-sonarqube-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sca-grype:
    name: (SCA) Grype
    if: ${{ inputs.sca-grype-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Current GitHub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Download Project Build
        uses: dawidd6/action-download-artifact@v6
        with:
          name: "${{ inputs.build-artifact }}-${{ matrix.os }}"
          path: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          github_token: ${{ secrets.github-token }}
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: ""
          commit: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check For File Existence
        if: ${{ inputs.build-directory != '' }}
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          fail: true

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install JavaScript Dependencies
        working-directory: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}
        run: npm ci

      - name: Run Grype - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sca/grype
        with:
          artifact-name: sca-grype-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sca-owasp-dependency-check:
    name: (SCA) OWASP Dependency Check
    if: ${{ inputs.sca-owasp-dependency-check-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Current GitHub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Download Project Build
        uses: dawidd6/action-download-artifact@v6
        with:
          name: "${{ inputs.build-artifact }}-${{ matrix.os }}"
          path: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          github_token: ${{ secrets.github-token }}
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: ""
          commit: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check For File Existence
        if: ${{ inputs.build-directory != '' }}
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          fail: true

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install JavaScript Dependencies
        working-directory: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}
        run: npm ci

      - name: Run OWASP Dependency Check - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sca/owasp-dependency-check
        with:
          nvd-api-key: ${{ secrets.nvd-api-key }}
          project-name: ${{ inputs.project-name }}
          oss_index_username: ${{ secrets.oss-index-username }}
          oss_index_password: ${{ secrets.oss-index-password }}
          artifact-name: sca-owasp-dependency-check-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  sca-snyk:
    name: (SCA) Snyk
    if: ${{ inputs.sca-snyk-enabled == true }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    env:
      SNYK_TOKEN: ${{ secrets.snyk-token }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}
          path: ${{ env.CHECKOUT_CURRENT_REPO_PATH }}

      - name: Checkout Project Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

      - name: Download Project Build
        uses: dawidd6/action-download-artifact@v6
        with:
          name: "${{ inputs.build-artifact }}-${{ matrix.os }}"
          path: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          github_token: ${{ secrets.github-token }}
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: ""
          commit: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Check For File Existence
        if: ${{ inputs.build-directory != '' }}
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ env.CHECKOUT_PROJECT_REPO_PATH }}/${{ inputs.build-directory }}"
          fail: true

      - name: Setup Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install JavaScript Dependencies
        working-directory: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}
        run: npm ci

      - name: Run Snyk - ${{ matrix.os }}
        uses: ./experiment-resources-repository/.github/actions/sca/snyk
        with:
          programming-language: ${{ env.PROJECT_PROGRAMMING_LANGUAGE }}
          artifact-name: sca-snyk-report-${{ matrix.os }}
          path: ${{ env.CHECKOUT_PROJECT_REPO_PATH }}

  create-cyclonedx-osv-report:
    name: Create CycloneDX OSV Report
    if: ${{ inputs.reporting-enabled == true && ! failure() && ! cancelled() }}
    needs: [
      sca-grype,
      sca-owasp-dependency-check,
      sca-snyk
    ]
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Current GitHub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}

      - name: Download CycloneDX SBOM Artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          name: cyclonedx-sbom-${{ env.PROJECT_PROGRAMMING_LANGUAGE }}-${{ matrix.os }}
          path: ./.github/actions/reporting/cyclonedx-sbom-osv-report
          github_token: ${{ secrets.github-token }}
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: ""
          commit: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Create CycloneDX OSV Report - ${{ matrix.os }}
        uses: ./.github/actions/reporting/cyclonedx-sbom-osv-report
        with:
          github-api-token: ${{ secrets.github-api-token }}
          experiment-id: 3
          experiment-github-project-name: ${{ inputs.project-name }}
          experiment-github-repository: ${{ github.repository }}
          experiment-programming-language: ${{ env.PROJECT_PROGRAMMING_LANGUAGE }}
          cyclonedx-sbom-filename: sbom.json
          artifact-name: cyclonedx-sbom-osv-report-${{ matrix.os }}
          include-unit-tests: false

  create-github-repository-information-report:
    name: Create GitHub Repository Information Report
    if: ${{ inputs.reporting-enabled == true && ! failure() && ! cancelled() }}
    needs: [
      sast-codeql,
      sast-horusec,
      sast-semgrep,
      sast-snyk-code,
      sast-sonarqube,
      sca-grype,
      sca-owasp-dependency-check,
      sca-snyk
    ]
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Current GitHub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}

      - name: Create GitHub Repository Information Report - ${{ matrix.os }}
        uses: ./.github/actions/reporting/github-repository-information-report
        with:
          github-api-token: ${{ secrets.github-api-token }}
          experiment-id: 3
          experiment-github-project-name: ${{ inputs.project-name }}
          experiment-github-repository: ${{ github.repository }}
          experiment-github-package-manager: Npm
          artifact-name: github-repository-information-report-${{ matrix.os }}
          include-unit-tests: false

  create-security-testing-tool-report:
    name: Create Security Testing Tool Report
    if: ${{ inputs.reporting-enabled == true && ! failure() && ! cancelled() }}
    needs: [
      sast-codeql,
      sast-horusec,
      sast-semgrep,
      sast-snyk-code,
      sast-sonarqube,
      sca-grype,
      sca-owasp-dependency-check,
      sca-snyk
    ]
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Current GitHub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}

      - name: Download All Build Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          path: ./.github/actions/reporting/vulnerability-results-report/automated
          github_token: ${{ secrets.github-token }}
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: ""
          commit: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set SonarQube Environment Variables
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'macos-14' }}
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
              echo "SONARQUBE_USER_TOKEN=${{ secrets.sonarqube-user-token-ubuntu }}" >> $GITHUB_ENV
              echo "SONARQUBE_URL=${{ secrets.sonarqube-url-ubuntu }}" >> $GITHUB_ENV
          else
              echo "SONARQUBE_USER_TOKEN=${{ secrets.sonarqube-user-token-macos }}" >> $GITHUB_ENV
              echo "SONARQUBE_URL=${{ secrets.sonarqube-url-macos }}" >> $GITHUB_ENV
          fi

      - name: Set SonarQube Environment Variables (Windows)
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          echo "SONARQUBE_USER_TOKEN=${{ secrets.sonarqube-user-token-windows }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "SONARQUBE_URL=${{ secrets.sonarqube-url-windows }}" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Grype only supports Ubuntu and MacOS
      - name: Set Grype Environment Variable
        run: |
          if [[ "${{ inputs.sca-grype-enabled }}" == "true" && "${{ matrix.os }}" != "windows-2022" ]]; then
              echo "SCA_GRYPE_REPORT_FILENAME=sca-grype-report-${{ matrix.os }}/results.json" >> $GITHUB_ENV
          else
              echo "SCA_GRYPE_REPORT_FILENAME=" >> $GITHUB_ENV
          fi

      # Remaining application environment variables
      - name: Set Remaining Environment Variables
        if: ${{ matrix.os != 'windows-2022' }}
        run: |
          # CodeQL
          if [[ "${{ inputs.sast-codeql-enabled }}" == "true" ]]; then
              echo "SAST_CODEQL_CSV_RESULT_FILENAME=sast-codeql-vulnerability-result.csv" >> $GITHUB_ENV
          else
              echo "SAST_CODEQL_CSV_RESULT_FILENAME=" >> $GITHUB_ENV
          fi
          
          # Horusec
          if [[ "${{ inputs.sast-horusec-enabled }}" == "true" ]]; then
              echo "SAST_HORUSEC_REPORT_FILENAME=sast-horusec-report-${{ matrix.os }}/horusec-report.json" >> $GITHUB_ENV
          else
              echo "SAST_HORUSEC_REPORT_FILENAME=" >> $GITHUB_ENV
          fi
          
          # Semgrep
          if [[ "${{ inputs.sast-semgrep-enabled }}" == "true" ]]; then
              echo "SAST_SEMGREP_REPORT_FILENAME=sast-semgrep-report-${{ matrix.os }}/semgrep-report.json" >> $GITHUB_ENV
          else
              echo "SAST_SEMGREP_REPORT_FILENAME=" >> $GITHUB_ENV
          fi
          
          # Snyk Code
          if [[ "${{ inputs.sast-snyk-code-enabled }}" == "true" ]]; then
              echo "SAST_SNYK_CODE_REPORT_FILENAME=sast-snyk-code-report-${{ matrix.os }}/snyk-code-report.json" >> $GITHUB_ENV
          else
              echo "SAST_SNYK_CODE_REPORT_FILENAME=" >> $GITHUB_ENV
          fi
          
          # SonarQube
          if [[ "${{ inputs.sast-sonarqube-enabled }}" == "true" ]]; then
              echo "SAST_SONARQUBE_CSV_RESULT_FILENAME=sast-sonarqube-vulnerability-result.csv" >> $GITHUB_ENV
          else
              echo "SAST_SONARQUBE_CSV_RESULT_FILENAME=" >> $GITHUB_ENV
          fi
          
          # OWASP Dependency Check
          if [[ "${{ inputs.sca-owasp-dependency-check-enabled }}" == "true" ]]; then
              echo "SCA_OWASP_DEPENDENCY_CHECK_REPORT_FILENAME=sca-owasp-dependency-check-report-${{ matrix.os }}/dependency-check-report.json" >> $GITHUB_ENV
          else
              echo "SCA_OWASP_DEPENDENCY_CHECK_REPORT_FILENAME=" >> $GITHUB_ENV
          fi
          
          # Snyk
          if [[ "${{ inputs.sca-snyk-enabled }}" == "true" ]]; then
              echo "SCA_SNYK_REPORT_FILENAME=sca-snyk-report-${{ matrix.os }}/snyk-report.json" >> $GITHUB_ENV
          else
              echo "SCA_SNYK_REPORT_FILENAME=" >> $GITHUB_ENV
          fi

      - name: Set Remaining Environment Variables
        if: ${{ matrix.os == 'windows-2022' }}
        shell: pwsh
        run: |
          # CodeQL
          if ("${{ inputs.sast-codeql-enabled }}" -eq "true") {
              echo "SAST_CODEQL_CSV_RESULT_FILENAME=sast-codeql-vulnerability-result.csv" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SAST_CODEQL_CSV_RESULT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

          # Horusec
          if ("${{ inputs.sast-horusec-enabled }}" -eq "true") {
              echo "SAST_HORUSEC_REPORT_FILENAME=sast-horusec-report-${{ matrix.os }}/horusec-report.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SAST_HORUSEC_REPORT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

          # Semgrep
          if ("${{ inputs.sast-semgrep-enabled }}" -eq "true") {
              echo "SAST_SEMGREP_REPORT_FILENAME=sast-semgrep-report-${{ matrix.os }}/semgrep-report.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SAST_SEMGREP_REPORT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

          # Snyk Code
          if ("${{ inputs.sast-snyk-code-enabled }}" -eq "true") {
              echo "SAST_SNYK_CODE_REPORT_FILENAME=sast-snyk-code-report-${{ matrix.os }}/snyk-code-report.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SAST_SNYK_CODE_REPORT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

          # SonarQube
          if ("${{ inputs.sast-sonarqube-enabled }}" -eq "true") {
              echo "SAST_SONARQUBE_CSV_RESULT_FILENAME=sast-sonarqube-vulnerability-result.csv" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SAST_SONARQUBE_CSV_RESULT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

          # OWASP Dependency Check
          if ("${{ inputs.sca-owasp-dependency-check-enabled }}" -eq "true") {
              echo "SCA_OWASP_DEPENDENCY_CHECK_REPORT_FILENAME=sca-owasp-dependency-check-report-${{ matrix.os }}/dependency-check-report.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SCA_OWASP_DEPENDENCY_CHECK_REPORT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

          # Snyk
          if ("${{ inputs.sca-snyk-enabled }}" -eq "true") {
              echo "SCA_SNYK_REPORT_FILENAME=sca-snyk-report-${{ matrix.os }}/snyk-report.json" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
              echo "SCA_SNYK_REPORT_FILENAME=" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Create Security Testing Tool Report - ${{ matrix.os }}
        uses: ./.github/actions/reporting/vulnerability-results-report/automated
        with:
          nvd-api-key: ${{ secrets.nvd-api-key }}
          github-api-token: ${{ secrets.github-api-token }}
          opencve-username: ${{ secrets.opencve-username }}
          opencve-password: ${{ secrets.opencve-password }}
          experiment-id: 3
          experiment-github-project-name: ${{ inputs.project-name }}
          experiment-programming-language: ${{ env.PROJECT_PROGRAMMING_LANGUAGE }}
          sonarqube-url: ${{ env.SONARQUBE_URL }}
          sonarqube-user-token: ${{ env.SONARQUBE_USER_TOKEN }}
          sonarqube-project-key: ${{ inputs.project-name }}
          deepsource-api-key: ${{ secrets.deepsource-api-key }}
          sast-codeql-csv-result-filename: ${{ env.SAST_CODEQL_CSV_RESULT_FILENAME }}
          sast-horusec-report-filename: ${{ env.SAST_HORUSEC_REPORT_FILENAME }}
          sast-semgrep-report-filename: ${{ env.SAST_SEMGREP_REPORT_FILENAME }}
          sast-snyk-code-report-filename: ${{ env.SAST_SNYK_CODE_REPORT_FILENAME }}
          sast-sonarqube-csv-result-filename: ${{ env.SAST_SONARQUBE_CSV_RESULT_FILENAME }}
          sca-grype-report-filename: ${{ env.SCA_GRYPE_REPORT_FILENAME }}
          sca-owasp-dependency-check-report-filename: ${{ env.SCA_OWASP_DEPENDENCY_CHECK_REPORT_FILENAME }}
          sca-snyk-report-filename: ${{ env.SCA_SNYK_REPORT_FILENAME }}
          artifact-name: automated-vulnerability-results-report-${{ matrix.os }}
          include-unit-tests: false

  export-opentelemetry-metrics:
    name: Export GitHub Action OpenTelemetry Metrics
    if: ${{ ! failure() && ! cancelled() }}
    needs: [
      create-cyclonedx-osv-report,
      create-github-repository-information-report,
      create-security-testing-tool-report
    ]
    strategy:
      matrix:
        os: [ ubuntu-22.04, windows-2022, macos-14 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Current GitHub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CHECKOUT_CURRENT_REPO_NAME }}

      - name: Export GitHub Action OpenTelemetry Metrics - ${{ matrix.os }}
        uses: ./.github/actions/metrics/opentelemetry-metrics-exporter
        with:
          honeycomb-api-key: ${{ secrets.honeycomb-api-key }}
          original-github-workflow-name: ${{ github.workflow }}
          github-token: ${{ secrets.github-token }}
